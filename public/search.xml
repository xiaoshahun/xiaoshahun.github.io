<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/05/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>算法的摆烂日记</title>
    <url>/2022/05/27/%E7%AE%97%E6%B3%95%E7%9A%84%E6%91%86%E7%83%82%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<img src="/images/huge.png" width="60%" height="30%" align="center/">
<span id="more"></span>

<h1 id="ISBN号码"><a href="#ISBN号码" class="headerlink" title="ISBN号码"></a>ISBN号码</h1><hr>
<p>描述<br>每一本正式出版的图书都有一个ISBN号码与之对应，ISBN码包括9位数字、1位识别码和3位分隔符，其规定格式如“x-xxx-xxxxx-x”，其中符号“-”就是分隔符（键盘上的减号），最后一位是识别码，例如0-670-82162-4就是一个标准的ISBN码。ISBN码的首位数字表示书籍的出版语言，例如0代表英语；第一个分隔符“-”之后的三位数字代表出版社，例如670代表维京出版社；第二个分隔符后的五位数字代表该书在该出版社的编号；最后一位为识别码。</p>
<p>识别码的计算方法如下：<br>首位数字乘以1加上次位数字乘以2……以此类推，用所得的结果mod 11，所得的余数即为识别码，如果余数为10，则识别码为大写字母X。例如ISBN号码0-670-82162-4中的识别码4是这样得到的：对067082162这9个数字，从左至右，分别乘以1，2，…,9,再求和，即0×1+6×2+……+2×9=158，然后取158 mod 11的结果4作为识别码。</p>
<p>你的任务是编写程序判断输入的ISBN号码中识别码是否正确，如果正确，则仅输出“Right”；如果错误，则输出你认为是正确的ISBN号码。</p>
<p>格式<br>输入格式<br>输入只有一行，是一个字符序列，表示一本书的ISBN号码（保证输入符合ISBN号码的格式要求）。</p>
<p>输出格式<br>输出共一行，假如输入的ISBN号码的识别码正确，那么输出“Right”，否则，按照规定的格式，输出正确的ISBN号码（包括分隔符“-”）。</p>
<p>样例1<br>样例输入1<br>0-670-82162-4<br>Copy<br>样例输出1<br>Right<br>Copy<br>样例2<br>样例输入2<br>0-670-82162-0<br>Copy<br>样例输出2<br>0-670-82162-4<br>Copy<br>限制<br>各个测试点1s</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	string x, x1;</span><br><span class="line">	cin &gt;&gt; x;</span><br><span class="line">	x1 = x;</span><br><span class="line">	x1.erase(1, 1);</span><br><span class="line">	x1.erase(4, 1);//erase(begin,len)去除指定位置字符串</span><br><span class="line">	int nums = 0;</span><br><span class="line">	for (int i = 0; i &lt; 9; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		nums += (x1[i] - 48) * (i + 1);</span><br><span class="line">	&#125;</span><br><span class="line">	int last_numb = nums % 11;</span><br><span class="line">	if (last_numb == 10)</span><br><span class="line">	&#123;</span><br><span class="line">		if (&#x27;X&#x27; - 48 == x[12] - 48)</span><br><span class="line">			cout &lt;&lt; &quot;Right&quot; &lt;&lt; endl;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			x = x.replace(12, 12, &quot;X&quot;);</span><br><span class="line">			cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	if (last_numb == x[12] - 48)</span><br><span class="line">		cout &lt;&lt; &quot;Right&quot; &lt;&lt; endl;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		x = x.replace(12, 12, to_string(last_numb));//replace(begin,end,replace_string)替换特定位置字符串</span><br><span class="line">		cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PS:这题纯模拟就行，小心大小写！！</p>
<hr>
<h1 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h1><hr>
<p>描述<br>若一个数（首位不为零）从左向右读与从右向左读都一样，我们就将其称之为回文数。</p>
<p>例如：给定一个10进制数56，将56加65（即把56从右向左读），得到121是一个回文数。</p>
<p>又如：对于10进制数87：<br>STEP1：87+78 = 165 STEP2：165+561 = 726<br>STEP3：726+627 = 1353 STEP4：1353+3531 = 4884<br>在这里的一步是指进行了一次N进制的加法，上例最少用了4步得到回文数4884。</p>
<p>写一个程序，给定一个N（2&lt;=N&lt;=10或N=16）进制数M，其中16进制数字为0-9与A-F，求最少经过几步可以得到回文数。如果在30步以内（包含30步）不可能得到回文数，则输出“Impossible!”</p>
<p>格式<br>输入格式<br>共两行<br>第一行为进制数N（2&lt;=N&lt;=10或N=16）<br>第二行为N进制数M（0&lt;=M&lt;=maxlongint）</p>
<p>输出格式<br>共一行<br>第一行为“STEP=”加上经过的步数或“Impossible!”</p>
<p>样例1<br>样例输入1<br>9<br>87<br>Copy<br>样例输出1<br>STEP=6<br>Copy<br>限制<br>各个测试点1s</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;  </span><br><span class="line">#include&lt;cstring&gt;  </span><br><span class="line">#include&lt;cstdio&gt;  </span><br><span class="line">using namespace std;</span><br><span class="line">string x;</span><br><span class="line">int jz, n, a[10001], s = 1;</span><br><span class="line">int pdhw(int n)</span><br><span class="line">&#123;</span><br><span class="line">    for (int i = 1; i &lt;= n / 2; i++)</span><br><span class="line">        if (a[i] != a[n - i + 1])</span><br><span class="line">            return 0;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line">int jf(int n)</span><br><span class="line">&#123;</span><br><span class="line">    int c[10001] = &#123; 0 &#125;, s = 1;</span><br><span class="line">    for (int i = 1; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i] = a[i] + a[n - i + 1] + c[i];</span><br><span class="line">        c[i + 1] += c[i] / jz;</span><br><span class="line">        c[i] %= jz;//很妙的进制转换加法</span><br><span class="line">    &#125;</span><br><span class="line">    if (c[n + 1] != 0)</span><br><span class="line">        n++;</span><br><span class="line">    for (int i = n; i &gt;= 1; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        a[s] = c[i];</span><br><span class="line">        s++;</span><br><span class="line">    &#125;//重新赋值</span><br><span class="line">    return n;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	cin &gt;&gt; jz &gt;&gt; x;</span><br><span class="line">    n = x.size();</span><br><span class="line">    for (int i = 1; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (x[i - 1] &lt; 65)</span><br><span class="line">            a[i] = x[i - 1] - &#x27;0&#x27;;</span><br><span class="line">        else</span><br><span class="line">            a[i] = x[i - 1] - 55;</span><br><span class="line">    &#125;//十进制进位   重回起</span><br><span class="line">    while (s &lt;= 30)</span><br><span class="line">    &#123;</span><br><span class="line">        if (pdhw(n) == 1)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; &quot;STEP=&quot; &lt;&lt; s - 1;</span><br><span class="line">            system(&quot;pause&quot;);</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        s++;</span><br><span class="line">        n = jf(n);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; &quot;Impossible!&quot;;</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="数独验证"><a href="#数独验证" class="headerlink" title="数独验证"></a>数独验证</h1><hr>
<p>背景<br>XX学校风靡一款智力游戏，也就是数独（九宫格），先给你一个数独，并需要你验证是否符合规则。</p>
<p>描述<br>具体规则如下:<br>每一行都用到1,2,3,4,5,6,7,8,9，位置不限，<br>每一列都用到1,2,3,4,5,6,7,8,9，位置不限，<br>每3×3的格子（共九个这样的格子）都用到1,2,3,4,5,6,7,8,9，位置不限，<br>游戏的过程就是用1,2,3,4,5,6,7,8,9填充空白，并要求满足每行、每列、每个九宫格都用到1,2,3,4,5,6,7,8,9。</p>
<p>如下是一个正确的数独:<br>5 8 1 4 9 3 7 6 2<br>9 6 3 7 1 2 5 8 4<br>2 7 4 8 6 5 9 3 1<br>1 2 9 5 4 6 3 7 8<br>4 3 6 1 8 7 2 9 5<br>7 5 8 3 2 9 1 4 6<br>8 9 2 6 7 1 4 5 3<br>6 1 5 9 3 4 8 2 7<br>3 4 7 2 5 8 6 1 9</p>
<p>格式<br>输入格式<br>输入n个数独，你来验证它是否违反规则.<br>第一行为数独个数，第二行开始为第一个数独，之后为第二个，至第n个.<br>注意！每个数独之间有一个回车隔开!</p>
<p>输出格式<br>若正确则输出”Right”若不正确则输出”Wrong” 输出一个换一行</p>
<p>样例1<br>样例输入1<br>2<br>5 8 1 4 9 3 7 6 2<br>9 6 3 7 1 2 5 8 4<br>2 7 4 8 6 5 9 3 1<br>1 2 9 5 4 6 3 7 8<br>4 3 6 1 8 7 2 9 5<br>7 5 8 3 2 9 1 4 6<br>8 9 2 6 7 1 4 5 3<br>6 1 5 9 3 4 8 2 7<br>3 4 7 2 5 8 6 1 9</p>
<p>1 2 3 4 5 6 7 8 9<br>2 3 4 5 6 7 8 9 1<br>3 4 5 6 7 8 9 1 2<br>4 5 6 7 8 9 1 2 3<br>5 6 7 8 9 1 2 3 4<br>6 7 8 9 1 2 3 4 5<br>7 8 9 1 2 3 4 5 6<br>8 9 1 2 3 4 5 6 7<br>9 1 2 3 4 5 6 7 8<br>Copy<br>样例输出1<br>Right<br>Wrong<br>Copy<br>限制<br>各个测试点1s</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;  </span><br><span class="line">#include&lt;cstring&gt;  </span><br><span class="line">#include&lt;cstdio&gt;  </span><br><span class="line">#include &quot;math.h&quot;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">queue&lt;int&gt; b1;</span><br><span class="line"></span><br><span class="line">bool a1(int a[9][9])</span><br><span class="line">&#123;</span><br><span class="line">	int nums, nums1;</span><br><span class="line">	for (int i = 0; i &lt; 9; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		nums = 1;</span><br><span class="line">		nums1 = 1;</span><br><span class="line">		for (int j = 0; j &lt; 9; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			nums *= a[i][j];</span><br><span class="line">			nums1 *= a[j][i];</span><br><span class="line">		&#125;</span><br><span class="line">		if (nums != 362880 || nums1 != 362880)</span><br><span class="line">		&#123;</span><br><span class="line">			return 0;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return 1;</span><br><span class="line">&#125;</span><br><span class="line">bool jiu(int a[9][9])</span><br><span class="line">&#123;</span><br><span class="line">	int n = 0;</span><br><span class="line">	int nums, nums1;</span><br><span class="line">	while (1)</span><br><span class="line">	&#123;</span><br><span class="line">		nums = 1;</span><br><span class="line">		nums1 = 1;</span><br><span class="line">		for (int i = n; i &lt; n + 3; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			for (int j = n; j &lt; n + 3; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				nums *= a[i][j];</span><br><span class="line">				nums1 *= a[j][i];</span><br><span class="line">				//cout &lt;&lt; nums &lt;&lt; &quot; &quot; &lt;&lt; nums1 &lt;&lt; &quot; &quot; &lt;&lt; n &lt;&lt; endl;				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		if (nums != 362880 || nums1 != 362880)</span><br><span class="line">		&#123;</span><br><span class="line">			return 0;</span><br><span class="line">		&#125;</span><br><span class="line">		n = n + 3;</span><br><span class="line">		if (n &gt;= 9)</span><br><span class="line">			break;</span><br><span class="line">	&#125;</span><br><span class="line">	return 1;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	int u = n;</span><br><span class="line">	while (n--)</span><br><span class="line">	&#123;</span><br><span class="line">		int a[9][9];</span><br><span class="line">		for (int i = 0; i &lt; 9; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			for (int j = 0; j &lt; 9; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				cin &gt;&gt; a[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		if (a1(a) == 0 || jiu(a) == 0)</span><br><span class="line">			b1.push(0);</span><br><span class="line">		else</span><br><span class="line">			b1.push(1);</span><br><span class="line">	&#125;</span><br><span class="line">	while (u--)</span><br><span class="line">	&#123;</span><br><span class="line">		if (!b1.empty())</span><br><span class="line">		&#123;</span><br><span class="line">			if (b1.front() == 1)</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; &quot;Right&quot; &lt;&lt; endl;</span><br><span class="line">			&#125;</span><br><span class="line">			else</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; &quot;Wrong&quot; &lt;&lt; endl;</span><br><span class="line">			&#125;</span><br><span class="line">			b1.pop();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PS:没什么难度的东西， 注意输出格式 和九宫格判断即可</p>
<hr>
<h1 id="合并果子"><a href="#合并果子" class="headerlink" title="合并果子"></a>合并果子</h1><hr>
<p>描述<br>在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。<br>每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过n-1次合并之后，就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。<br>因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为1，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。<br>例如有3种果子，数目依次为1，2，9。可以先将1、2堆合并，新堆数目为3，耗费体力为3。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为12，耗费体力为12。所以多多总共耗费体力=3+12=15。可以证明15为最小的体力耗费值。</p>
<p>格式<br>输入格式<br>输入包括两行，第一行是一个整数n(1&lt;＝n&lt;=10000)，表示果子的种类数。第二行包含n个整数，用空格分隔，第i个整数ai(1&lt;＝ai&lt;=20000)是第i种果子的数目。</p>
<p>输出格式<br>输出包括一行，这一行只包含一个整数，也就是最小的体力耗费值。输入数据保证这个值小于2^31。</p>
<p>样例1<br>样例输入1<br>3<br>1 2 9<br>Copy<br>样例输出1<br>15<br>Copy<br>限制<br>每个测试点1s</p>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;  </span><br><span class="line">#include&lt;cstring&gt;  </span><br><span class="line">#include&lt;cstdio&gt;  </span><br><span class="line">#include &quot;math.h&quot;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	int* a = new int[n];</span><br><span class="line">	for (int i = 0; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	sort(a, a + n);//快速排序函数  时间复杂度 n*log2(n)</span><br><span class="line">	int sum = 0;</span><br><span class="line">	for (int i = 1; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i] += a[i - 1];</span><br><span class="line">		sum += a[i];</span><br><span class="line">		sort(a + i, a + n);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">	system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>PS: 虽然简单  但耗时巨长  优化空间巨大<br>priority_queue&lt;int, vector<int>, greater&lt;&gt;&gt; a; //优先队列 升序  greater&lt;&gt; -&gt; less&lt;&gt; 则为降序</int></p>
<hr>
<p>#均分纸牌</p>
<hr>
<p>描述<br>有 N 堆纸牌，编号分别为 1，2，…, N。每堆上有若干张，但纸牌总数必为 N 的倍数。可以在任一堆上取若于张纸牌，然后移动。</p>
<p>移牌规则为：在编号为 1 堆上取的纸牌，只能移到编号为 2 的堆上；在编号为 N 的堆上取的纸牌，只能移到编号为 N-1 的堆上；其他堆上取的纸牌，可以移到相邻左边或右边的堆上。</p>
<p>现在要求找出一种移动方法，用最少的移动次数使每堆上纸牌数都一样多。</p>
<p>例如 N=4，4 堆纸牌数分别为：<br>①　9　②　8　③　17　④　6<br>移动3次可达到目的：<br>从 ③ 取 4 张牌放到 ④ （9 8 13 10） -&gt; 从 ③ 取 3 张牌放到 ②（9 11 10 10）-&gt; 从 ② 取 1 张牌放到①（10 10 10 10）。</p>
<p>格式<br>输入格式<br>N（N 堆纸牌，1 &lt;= N &lt;= 100）<br>A1 A2 … An （N 堆纸牌，每堆纸牌初始数，l&lt;= Ai &lt;=10000）</p>
<p>输出格式<br>所有堆均达到相等时的最少移动次数。</p>
<p>样例1<br>样例输入1<br>4<br>9 8 17 6<br>Copy<br>样例输出1<br>3<br>Copy<br>限制<br>每个测试点1s</p>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;  </span><br><span class="line">#include&lt;cstring&gt;  </span><br><span class="line">#include&lt;cstdio&gt;  </span><br><span class="line">#include &quot;math.h&quot;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	int* a = new int[n];</span><br><span class="line">	int num = 0;</span><br><span class="line">	for (int i = 0; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">		num += a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	int mean = num / n;</span><br><span class="line">	int outpt = 0;</span><br><span class="line">	/*for (int i = 0; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;*/</span><br><span class="line">	if (a[n - 1] - a[0] == 0)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; outpt &lt;&lt; endl;</span><br><span class="line">		system(&quot;pause&quot;);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	for (int i = 0; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if (a[i] &gt;  mean)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i + 1] += a[i] - mean;</span><br><span class="line">			outpt++;</span><br><span class="line">		&#125;</span><br><span class="line">		else if (a[i] &lt; mean)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i + 1] -= mean - a[i];</span><br><span class="line">			outpt++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; outpt &lt;&lt; endl;</span><br><span class="line">	system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="外观数列"><a href="#外观数列" class="headerlink" title="外观数列"></a>外观数列</h1><hr>
<p>给定一个正整数 n ，输出外观数列的第 n 项。</p>
<p>「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。</p>
<p>你可以将其视作是由递归公式定义的数字字符串序列：</p>
<p>countAndSay(1) = “1”<br>countAndSay(n) 是对 countAndSay(n-1) 的描述，然后转换成另一个数字字符串。<br>前五项如下：</p>
<ol>
<li><pre><code>1
</code></pre>
</li>
<li><pre><code>11
</code></pre>
</li>
<li><pre><code>21
</code></pre>
</li>
<li><pre><code>1211
</code></pre>
</li>
<li><pre><code>111221
</code></pre>
第一项是数字 1<br>描述前一项，这个数是 1 即 “ 一 个 1 ”，记作 “11”<br>描述前一项，这个数是 11 即 “ 二 个 1 ” ，记作 “21”<br>描述前一项，这个数是 21 即 “ 一 个 2 + 一 个 1 ” ，记作 “1211”<br>描述前一项，这个数是 1211 即 “ 一 个 1 + 一 个 2 + 二 个 1 ” ，记作 “111221”<br>要 描述 一个数字字符串，首先要将字符串分割为 最小 数量的组，每个组都由连续的最多 相同字符 组成。然后对于每个组，先描述字符的数量，然后描述字符，形成一个描述组。要将描述转换为数字字符串，先将每组中的字符数量用数字替换，再将所有描述组连接起来。</li>
</ol>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string countAndSay(int n) </span><br><span class="line">&#123;</span><br><span class="line">	if (n == 1)</span><br><span class="line">		return &quot;1&quot;;</span><br><span class="line">	string a1 = countAndSay(n - 1); //递归法</span><br><span class="line">	string s = &quot;&quot;;</span><br><span class="line">	char temp = a1[0];</span><br><span class="line">	int num = 0;</span><br><span class="line">	for (int i = 0; i &lt;= a1.size(); i++)//有点越界</span><br><span class="line">	&#123;</span><br><span class="line">		if (a1[i] == temp)</span><br><span class="line">			num++;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			s += to_string(num) + temp;//上一次+num累计+现存？？？</span><br><span class="line">			cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">			temp = a1[i];</span><br><span class="line">			num = 1;//因为已经存在这个数  则默认从0开始</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="删除链表的倒数第N个节点"><a href="#删除链表的倒数第N个节点" class="headerlink" title="删除链表的倒数第N个节点"></a>删除链表的倒数第N个节点</h1><hr>
<p><img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" alt="示例一"><br>输入：head = [1,2,3,4,5], n = 2<br>输出：[1,2,3,5]<br>示例 2：</p>
<p>输入：head = [1], n = 1<br>输出：[]<br>示例 3：</p>
<p>输入：head = [1,2], n = 1<br>输出：[1]</p>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * struct ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode *next;</span><br><span class="line"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span><br><span class="line"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="line"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* removeNthFromEnd(ListNode* head, int n) &#123;</span><br><span class="line">        ListNode* temp = head;</span><br><span class="line">        int num = length(head) - n;</span><br><span class="line">        if(num == 0)</span><br><span class="line">        return head-&gt;next;</span><br><span class="line">        for(int i = 0;i&lt;num - 1;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">        return head;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">int length(ListNode* head) &#123;</span><br><span class="line">    int len = 0;</span><br><span class="line">    while (head != NULL) &#123;</span><br><span class="line">        len++;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    return len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>算法的小小学习计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>小傻混的OPENCV摆烂日记</title>
    <url>/2022/05/20/%E5%B0%8F%E5%82%BB%E6%B7%B7%E7%9A%84OPENCV%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<img src="/images/huge.png" width="60%" height="30%" align="center/">
<span id="more"></span>

<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><hr>
<h2 id="imread-amp-amp-imshow"><a href="#imread-amp-amp-imshow" class="headerlink" title="imread &amp;&amp; imshow"></a>imread &amp;&amp; imshow</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;opencv2/opencv.hpp&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">using namespace cv;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/2.jpg&quot;, IMREAD_GRAYSCALE);//读图片  第二个参数为色彩</span><br><span class="line">	if (src.empty())//判断图像是否读取成功</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; &quot;no image&quot; &lt;&lt; endl;</span><br><span class="line">		return -1;</span><br><span class="line">	&#125;</span><br><span class="line">	namedWindow(&quot;input&quot;, WINDOW_FREERATIO);//自由拉伸窗口</span><br><span class="line">	imshow(&quot;input&quot;, src);//只支持256色8位，浮动</span><br><span class="line">	waitKey(0);//0为停止  其余数字停顿x毫秒</span><br><span class="line">	destroyAllWindows();//销毁之前窗口</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">imread第二参数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">IMREAD_ANYCOLOR</td>
<td align="center">彩色图像</td>
</tr>
<tr>
<td align="center">IMREAD_ANYDEPTH</td>
<td align="center">任意深度图像</td>
</tr>
<tr>
<td align="center">IMREAD_GRAYSCALE</td>
<td align="center">灰度图</td>
</tr>
</tbody></table>
<p><em>imshow 不能超过640x640</em><br><em>imread 读取路径不能有空格要跟名字完全一致</em></p>
<hr>
<h2 id="imwrite-amp-amp-图像格式转换"><a href="#imwrite-amp-amp-图像格式转换" class="headerlink" title="imwrite &amp;&amp; 图像格式转换"></a>imwrite &amp;&amp; 图像格式转换</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void colorSpace(Mat&amp; image)</span><br><span class="line">&#123;</span><br><span class="line">	Mat gray, hsv;</span><br><span class="line">	cvtColor(image, hsv, COLOR_BGR2HSV);//hsv图像为image（BGR）图像hsv转换后的图像</span><br><span class="line">    //H(0~180)(颜色) S(饱和度) V(亮度)</span><br><span class="line">	cvtColor(image, gray, COLOR_BGR2GRAY);//gray图像为image图像的灰度图</span><br><span class="line">	imwrite(&quot;D:/0/gray.jpg&quot;, gray);//保存图像至D:/0/gray.jpg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="图像的创建与赋值-amp-amp-空白图像的创建"><a href="#图像的创建与赋值-amp-amp-空白图像的创建" class="headerlink" title="图像的创建与赋值 &amp;&amp; 空白图像的创建"></a>图像的创建与赋值 &amp;&amp; 空白图像的创建</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/2.jpg&quot;);</span><br><span class="line">	//创建--克隆    出现新的地址</span><br><span class="line">	Mat m1 = src.clone();</span><br><span class="line">	//复制    出现新的地址</span><br><span class="line">	Mat m2;</span><br><span class="line">	src.copyTo(m2);</span><br><span class="line">	//赋值    m3指针的指向改变</span><br><span class="line">	Mat m3 = src;</span><br><span class="line">	//创建空白图像</span><br><span class="line">	Mat m4 = Mat::zeros(Size(512, 512), CV_8UC3);//CV_8UC3   8位无符号char三通道图片</span><br><span class="line">	//cout &lt;&lt; m4.cols &lt;&lt; &quot; &quot; &lt;&lt; m4.rows &lt;&lt; &quot; &quot; &lt;&lt; m4.channels() &lt;&lt; endl;//获取图像宽、高、通道数</span><br><span class="line">	m4 = Scalar(0, 255, 0);//给全部像素通道赋值</span><br><span class="line">	//cout &lt;&lt; m4 &lt;&lt; endl;</span><br><span class="line">	imshow(&quot;创建图像&quot;, m4);</span><br><span class="line">	</span><br><span class="line">	waitKey(0);	</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="图像像素的读取和操作"><a href="#图像像素的读取和操作" class="headerlink" title="图像像素的读取和操作"></a>图像像素的读取和操作</h2><p>对图像的操作索引有两种方式：row and col ； 指针索引<br>dims不同返回的值的格式也不同</p>
<h3 id="行列索引"><a href="#行列索引" class="headerlink" title="行列索引"></a>行列索引</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/2.jpg&quot;);</span><br><span class="line">	int w = src.cols;//宽</span><br><span class="line">	int h = src.rows;//高</span><br><span class="line">	int dims = src.channels();//通道</span><br><span class="line">	//根据row  and  col来索引</span><br><span class="line">	for (int rows = 0; rows &lt; h; rows++)//两个for遍历图片所有像素</span><br><span class="line">	&#123;</span><br><span class="line">		for (int cols = 0; cols &lt; w; cols++)</span><br><span class="line">		&#123;</span><br><span class="line">			//dims通道数判断  通道不同返回值不同</span><br><span class="line">			if (dims == 1)//灰度图</span><br><span class="line">			&#123;</span><br><span class="line">				int pv = src.at&lt;uchar&gt;(rows, cols);//像素读取</span><br><span class="line">				src.at&lt;uchar&gt;(rows, cols) = 255 - pv;//像素改写</span><br><span class="line">			&#125;</span><br><span class="line">			if (dims == 3)//RGB 彩图</span><br><span class="line">			&#123;</span><br><span class="line">				Vec3b bgr = src.at&lt;Vec3b&gt;(rows, cols);</span><br><span class="line">				//像素读取   3通道  一个像素  3个值    Vec3b类似于int数组</span><br><span class="line">				src.at&lt;Vec3b&gt;(rows,cols)[0] = 255 - bgr[0];//像素改写</span><br><span class="line">				src.at&lt;Vec3b&gt;(rows, cols)[1] = 255 - bgr[1];</span><br><span class="line">				src.at&lt;Vec3b&gt;(rows, cols)[2] = 255 - bgr[2];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	imshow(&quot;input&quot;, src);</span><br><span class="line">	waitKey(0);	</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="指针索引"><a href="#指针索引" class="headerlink" title="指针索引"></a>指针索引</h3><p>相较于 row和col的索引<br>指针索引效率更高  但如果不仔细指针所带来的问题难以发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/2.jpg&quot;);</span><br><span class="line">	int w = src.cols;//宽</span><br><span class="line">	int h = src.rows;//高</span><br><span class="line">	int dims = src.channels();//通道</span><br><span class="line">	for (int rows = 0; rows &lt; h; rows++)//两个for遍历图片所有像素</span><br><span class="line">	&#123;</span><br><span class="line">		uchar* current_rows = src.ptr&lt;uchar&gt;(rows);//姑且认为像素指针的储存是连续的</span><br><span class="line">		for (int cols = 0; cols &lt; w; cols++)</span><br><span class="line">		&#123;			</span><br><span class="line">			//dims通道数判断  通道不同返回值不同</span><br><span class="line">			if (dims == 1)//灰度图   通过指针的方式获取像素值   并且   改变像素值</span><br><span class="line">			&#123;</span><br><span class="line">				int pv = *current_rows;</span><br><span class="line">				*current_rows++ = 255 - pv;</span><br><span class="line">			&#125;</span><br><span class="line">			if (dims == 3)//RGB 彩图   通过指针的方式获取像素值   并且   改变像素值(3通道就要执行3次)</span><br><span class="line">			&#123;</span><br><span class="line">				*current_rows++ = 255 - *current_rows;</span><br><span class="line">				*current_rows++ = 255 - *current_rows;</span><br><span class="line">				*current_rows++ = 255 - *current_rows;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	imshow(&quot;input&quot;, src);</span><br><span class="line">	waitKey(0);	</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="像素算术法则"><a href="#像素算术法则" class="headerlink" title="像素算术法则"></a>像素算术法则</h2><p>普通的运算法则<br>图像强化…</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/2.jpg&quot;);</span><br><span class="line">	src = src + Scalar(50, 50, 50);//加法/减法/除法 --&gt; +，-，/</span><br><span class="line">	//saturate_cast&lt;uchar&gt;  将范围化成uchar的范围 </span><br><span class="line">	multiply(src, Scalar(20, 20, 20), src);//乘法  越界成255</span><br><span class="line">	add(src, Scalar(20, 20, 20), src);//内置加</span><br><span class="line">	subtract(src, Scalar(20, 20, 20), src);//内置减</span><br><span class="line">	divide(src, Scalar(20, 20, 20), src);//内置除</span><br><span class="line">	imshow(&quot;原&quot;, src);</span><br><span class="line">	waitKey(0);	</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="创建trackbat调整亮度"><a href="#创建trackbat调整亮度" class="headerlink" title="创建trackbat调整亮度"></a>创建trackbat调整亮度</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//createTrackbar  中我们自己需要的函数</span><br><span class="line">void on_track(int lightness, void* src)</span><br><span class="line">&#123;</span><br><span class="line">	Mat m, dst;</span><br><span class="line">	Mat image = *((Mat*)src);</span><br><span class="line">	m = Mat::zeros(image.size(), image.type());</span><br><span class="line">	dst = Mat::zeros(image.size(), image.type());</span><br><span class="line">	m = Scalar(lightness, lightness, lightness);</span><br><span class="line">	add(image, m, dst);</span><br><span class="line">	//subtract,divide,multiply 都行</span><br><span class="line">	//error:: add(src, m, src) 原图像将会一直累加亮度  需用dst作为新的图  src作为基准</span><br><span class="line">	imshow(&quot;原&quot;, dst);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src;</span><br><span class="line">	int max_value = 100;//最大值</span><br><span class="line">	int lightness = 50;//初始值</span><br><span class="line">	src = imread(&quot;D:/0/2.jpg&quot;);</span><br><span class="line">	namedWindow(&quot;亮度调整&quot;, WINDOW_AUTOSIZE);//窗口创建</span><br><span class="line">	createTrackbar(&quot;Value Bar&quot;, &quot;亮度调整&quot;, &amp;lightness, max_value, on_track, (void*)(&amp;src));</span><br><span class="line">	on_track(lightness, &amp;src);//回调函数</span><br><span class="line">	//初始值、最大值、自带函数、附加值</span><br><span class="line">	waitKey(0);	</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="创建on-track调整亮度-amp-amp-on-contrast调整对比度-不知道为什么-各玩各的？？？？"><a href="#创建on-track调整亮度-amp-amp-on-contrast调整对比度-不知道为什么-各玩各的？？？？" class="headerlink" title="创建on_track调整亮度 &amp;&amp; on_contrast调整对比度(不知道为什么 各玩各的？？？？)"></a>创建on_track调整亮度 &amp;&amp; on_contrast调整对比度(不知道为什么 各玩各的？？？？)</h3><p>on_track不变  多加一个  on_contrast</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static void on_contrast(int contrast_init, void* src1)</span><br><span class="line">&#123;</span><br><span class="line">	Mat m;</span><br><span class="line">	Mat image = *((Mat*)src1);</span><br><span class="line">	m = Mat::zeros(image.size(), image.type());</span><br><span class="line">	m = Scalar(contrast_init, contrast_init, contrast_init);</span><br><span class="line">	double contrast = contrast_init / 100.0;</span><br><span class="line">	addWeighted(image, contrast, m, 0.0, 0, dst);//融合两张图 image alpha m beta gamma dst</span><br><span class="line">	imshow(&quot;xin&quot;, dst);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	src = imread(&quot;D:/0/2.jpg&quot;);</span><br><span class="line">	dst = Mat::zeros(src.size(), src.type());</span><br><span class="line">	namedWindow(&quot;亮度与对比度调整&quot;, WINDOW_AUTOSIZE);//窗口创建</span><br><span class="line">	int max_value = 100;//最大值</span><br><span class="line">	int lightness = 50;//初始值</span><br><span class="line">	int contrast_init = 100;</span><br><span class="line">	int contrast_max = 200;</span><br><span class="line">	createTrackbar(&quot;Value Bar&quot;, &quot;亮度与对比度调整&quot;, &amp;lightness, max_value, on_track, (void*)(&amp;src));</span><br><span class="line">	createTrackbar(&quot;Contrast Bar&quot;, &quot;亮度与对比度调整&quot;, &amp;contrast_init, contrast_max, on_contrast, (void*)(&amp;src));</span><br><span class="line">	//初始值、最大值、自带函数、附加值</span><br><span class="line">	on_track(lightness, &amp;src);</span><br><span class="line">	on_contrast(contrast_init, &amp;src);</span><br><span class="line">	waitKey(0);	</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并没什么难理解<br>addWeighted(src1, alpha, src2, beta, gamma, dst)比较特殊  可以线性融合两张图大小要一致</p>
<table>
<thead>
<tr>
<th align="center">addWeighted参数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">src1</td>
<td align="center">第一个原数组</td>
</tr>
<tr>
<td align="center">alpha</td>
<td align="center">第一个数组元素权重</td>
</tr>
<tr>
<td align="center">src2</td>
<td align="center">第二个原数组</td>
</tr>
<tr>
<td align="center">beta</td>
<td align="center">第二个数组元素权重</td>
</tr>
<tr>
<td align="center">gamma</td>
<td align="center">图一与图二作和后添加的数值</td>
</tr>
<tr>
<td align="center">dst</td>
<td align="center">输出图片</td>
</tr>
</tbody></table>
<hr>
<h2 id="融合的功能"><a href="#融合的功能" class="headerlink" title="融合的功能"></a>融合的功能</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat a;</span><br><span class="line">	Mat b, dst;</span><br><span class="line">	a = imread(&quot;D:/0/173.jpg&quot;);</span><br><span class="line">	b = imread(&quot;D:/0/177.jpg&quot;);</span><br><span class="line">	addWeighted(a, 0.25, b, 0.5, 2, dst);</span><br><span class="line">	imshow(&quot;xin&quot;, dst);</span><br><span class="line">	namedWindow(&quot;xin&quot;, WINDOW_FREERATIO);</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="伪色彩增强"><a href="#伪色彩增强" class="headerlink" title="伪色彩增强"></a>伪色彩增强</h2><p>可以给灰度图伪上色</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src, dst;</span><br><span class="line">	src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	dst = Mat::zeros(src.size(), src.type());</span><br><span class="line">	applyColorMap(src, dst, COLORMAP_AUTUMN);// 第三个参数为枚举类型</span><br><span class="line">	imshow(&quot;原图&quot;, src);</span><br><span class="line">	imshow(&quot;新图&quot;, dst);</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="图像像素的逻辑操作"><a href="#图像像素的逻辑操作" class="headerlink" title="图像像素的逻辑操作"></a>图像像素的逻辑操作</h2><p>与、或、非的操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat m1 = Mat::zeros(Size(256, 256),CV_8UC3);</span><br><span class="line">	Mat m2 = Mat::zeros(Size(256, 256), CV_8UC3);</span><br><span class="line">	//rectangle(image, Rect(), Scarlar(), thickness, linetype, 0);</span><br><span class="line">	//rect(x, y, width, height)</span><br><span class="line">	rectangle(m1, Rect(100, 100, 80, 80), Scalar(255, 255, 0), -1, LINE_8, 0);</span><br><span class="line">	rectangle(m2, Rect(100, 100, 80, 80), Scalar(255, 0, 255), -1, LINE_8, 0);</span><br><span class="line">	//在图像中对像素点操作</span><br><span class="line">	//imshow(&quot;m1&quot;, m1);</span><br><span class="line">	Mat m3;</span><br><span class="line">	bitwise_and(m1, m2, m3);//与操作 图像都1的地方</span><br><span class="line">	//bitwise_or(m1, m2, m3);//或操作  图像有1的东方</span><br><span class="line">	//bitwise_not(m1, m3);//非操作 ~也是取非操作</span><br><span class="line">	//bitwise_xor(m1, m2, m3);//异或操作  且的位置取反</span><br><span class="line">	imshow(&quot;m3&quot;, m3);</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="通道的分离和融合"><a href="#通道的分离和融合" class="headerlink" title="通道的分离和融合"></a>通道的分离和融合</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	vector&lt;Mat&gt; mv;//Mat类型的容器</span><br><span class="line">	split(src, mv);//分离彩色图像的 R G B 通道</span><br><span class="line">	imshow(&quot;蓝色&quot;, mv[0]);</span><br><span class="line">	imshow(&quot;绿色&quot;, mv[1]);</span><br><span class="line">	imshow(&quot;黄色&quot;, mv[2]);</span><br><span class="line"></span><br><span class="line">	//将G B通道置0 融合到新图像中 就可以仅显示单色图像</span><br><span class="line">	Mat dst;</span><br><span class="line">	mv[1] = 0;</span><br><span class="line">	mv[2] = 0;</span><br><span class="line">	merge(mv, dst);//融合分离的图像</span><br><span class="line">	imshow(&quot;蓝&quot;, dst);</span><br><span class="line">	int from_to[] = &#123; 0, 2, 1, 1, 2, 0 &#125;;//偶数下标的用来标识输入矩阵，奇数下标的用来标识输出矩阵。若是偶数下标为负数，那么相应的输出矩阵为零矩阵。</span><br><span class="line">	mixChannels(&amp;src, 1, &amp;dst, 1, from_to, 3);//通道混合</span><br><span class="line">	//输入矩阵的向量(相同大小和深度)， 输入矩阵的个数， 输出矩阵的向量(事先分配空间)， 输出矩阵个数， 序号对向量， 序号对数</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="色彩空间的转换"><a href="#色彩空间的转换" class="headerlink" title="色彩空间的转换"></a>色彩空间的转换</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//色彩空间转换</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	Mat hsv;</span><br><span class="line">	cvtColor(src, hsv, COLOR_BGR2HSV);//src变为HSV类型</span><br><span class="line">	Mat mask;</span><br><span class="line">	inRange(hsv, Scalar(35, 43, 46), Scalar(77, 255, 255), mask);</span><br><span class="line">	//图像， 提取颜色最小值， 最大值， 新图像</span><br><span class="line">	Mat redback = Mat::zeros(src.size(), src.type());</span><br><span class="line">	bitwise_not(mask, mask);//将颜色取反有颜色变为黑色</span><br><span class="line">	imshow(&quot;mask&quot;, mask);</span><br><span class="line">	src.copyTo(redback, mask);//mask中为0的src中变为黑，不为0的不变，将扣出的部分放入redback中</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="像素值统计"><a href="#像素值统计" class="headerlink" title="像素值统计"></a>像素值统计</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//像素值统计</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	vector&lt;Mat&gt;mv;//Mat容器</span><br><span class="line">	split(src, mv);//分离通道</span><br><span class="line">	double minv0, maxv0;</span><br><span class="line">	Point minLoc, maxLoc;//</span><br><span class="line">	for (int i = 0; i &lt; mv.size(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		minMaxLoc(mv[i], &amp;minv0, &amp;maxv0, &amp;minLoc, &amp;maxLoc, Mat());</span><br><span class="line">		//图像必须是单通道，计算矩阵最大值、最小值、最大值位置、最小值位置</span><br><span class="line">		//cout &lt;&lt; minv0 &lt;&lt; &quot; &quot; &lt;&lt; maxv0 &lt;&lt; endl;</span><br><span class="line">	&#125; </span><br><span class="line">	Mat mean, stddev;</span><br><span class="line">	meanStdDev(src, mean, stddev);//计算矩阵的均值和标准偏差。</span><br><span class="line">	double mean1, mean2, mean3;</span><br><span class="line">	mean1 = mean.at&lt;double&gt;(0, 0);//取得单通道的均值</span><br><span class="line">	mean2 = mean.at&lt;double&gt;(1, 0);</span><br><span class="line">	mean3 = mean.at&lt;double&gt;(2, 0);</span><br><span class="line">	cout &lt;&lt; mean1 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; mean2 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; mean3 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; mean &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; stddev &lt;&lt; endl;</span><br><span class="line">	system(&quot;pause&quot;);</span><br><span class="line">	//waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若得到的方差为0，均值恒定，则图片对比度非常低….近似纯色图，无信息</p>
<hr>
<h2 id="几何图像绘制"><a href="#几何图像绘制" class="headerlink" title="几何图像绘制"></a>几何图像绘制</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//几何图像绘制</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	Rect rect;</span><br><span class="line">	rect.x = 100;</span><br><span class="line">	rect.y = 100;//左上角</span><br><span class="line">	rect.width = 200;</span><br><span class="line">	rect.height = 200;//右下角</span><br><span class="line">	Mat m1 = Mat::zeros(src.size(), src.type());</span><br><span class="line">	rectangle(m1, rect, Scalar(255, 0, 0), -1, 8);//画矩阵</span><br><span class="line">	//在input上画Point的形状，颜色为Scalar，-1代表填充,8代表线型</span><br><span class="line">	circle(m1, Point(100, 100), 15, Scalar(0, 255, 0), 3, 8);//画圆</span><br><span class="line">	//在input上画Point的形状，圆半径，颜色，线长，线型</span><br><span class="line">	line(m1, Point(100, 100), Point(200, 200), Scalar(0, 0, 255), 3, 8);//画线</span><br><span class="line">	//在input上画线，起点，终点，颜色，线宽，线型</span><br><span class="line">	RotatedRect rrt;</span><br><span class="line">	rrt.center = Point(200, 200);//圆心</span><br><span class="line">	rrt.size = Size(300, 150);//长径，短径</span><br><span class="line">	rrt.angle = 5.0;//旋转角度  逆时针</span><br><span class="line">	ellipse(src, rrt, Scalar(255, 255, 0), 2, 8);</span><br><span class="line">	Mat dst;</span><br><span class="line">	addWeighted(src, 0.7, m1, 0.6, 2, dst);</span><br><span class="line">	imshow(&quot;1&quot;, dst);</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="随机"><a href="#随机" class="headerlink" title="随机"></a>随机</h2><p>我感觉RNG rng()是伪随机？？？？？<br>得在参数加入系统时间才能做到真随机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//随机</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	Mat m1 = Mat::zeros(Size(512, 512), CV_8UC3);</span><br><span class="line">	int w = m1.cols;</span><br><span class="line">	int h = m1.rows;</span><br><span class="line">	RNG rng(12345);//伪随机</span><br><span class="line">	//RNG rng((unsigned)time(NULL));//真随机</span><br><span class="line">	int x1, x2, y1, y2;</span><br><span class="line">	for (int i = 0;; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		x1 = rng.uniform(0, w);//随机产生0-w之间的数</span><br><span class="line">		y1 = rng.uniform(0, h);</span><br><span class="line">		x2 = rng.uniform(0, w);</span><br><span class="line">		y2 = rng.uniform(0, h);</span><br><span class="line">		line(m1, Point(x1, y1), Point(x2, y2), Scalar(rng.uniform(0, 255),</span><br><span class="line">			rng.uniform(0, 255), rng.uniform(0, 255)), 3, 8);</span><br><span class="line">		if (i == 10)</span><br><span class="line">		&#123;</span><br><span class="line">			m1 = Scalar(0, 0, 0);</span><br><span class="line">		&#125;</span><br><span class="line">		imshow(&quot;1&quot;, m1);</span><br><span class="line">		waitKey(1000);</span><br><span class="line">	&#125;</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="多边形绘制-amp-填充"><a href="#多边形绘制-amp-填充" class="headerlink" title="多边形绘制 &amp; 填充"></a>多边形绘制 &amp; 填充</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//多边形的小故事</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	Mat m1 = Mat::zeros(Size(512, 512), CV_8UC3);</span><br><span class="line">	Point p1(100, 100);</span><br><span class="line">	Point p2(350, 100);</span><br><span class="line">	Point p3(450, 280);</span><br><span class="line">	Point p4(320, 450);</span><br><span class="line">	Point p5(80, 400);</span><br><span class="line">	vector&lt;Point&gt;pts;</span><br><span class="line">	pts.push_back(p1);</span><br><span class="line">	pts.push_back(p2);</span><br><span class="line">	pts.push_back(p3);</span><br><span class="line">	pts.push_back(p4);</span><br><span class="line">	pts.push_back(p5);</span><br><span class="line">	//fillPoly(m1, pts, Scalar(0, 255, 255), 8, 0);//不知道为什么报错</span><br><span class="line">	polylines(m1, pts, true, Scalar(255, 0, 0), 3, 8, 0);//画多边形</span><br><span class="line">	//底图，Point容器，是否封闭，颜色，线宽，线型，相对位移(原点)</span><br><span class="line">	vector&lt;vector&lt;Point&gt;&gt;contours;//这玩意有点逆天</span><br><span class="line">	contours.push_back(pts);</span><br><span class="line">	drawContours(m1, contours, 0, Scalar(0, 255, 255), -1);</span><br><span class="line">	//input, vector类型的vector, 画第几个多边形，颜色, 线宽（填充）</span><br><span class="line">	imshow(&quot;1&quot;, m1);</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="归一化？！！！"><a href="#归一化？！！！" class="headerlink" title="归一化？！！！"></a>归一化？！！！</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//归一化！！！！！！！！！</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	Mat dst;</span><br><span class="line">	src.convertTo(src, CV_32F);//将src变为浮点型</span><br><span class="line">	normalize(src, dst, 0, 1.0, NORM_MINMAX);</span><br><span class="line">	//InputArray, OutputArray, alpha, beta, norm_type(归一化方式), dtype(与InputArray类型一直), mask</span><br><span class="line">	//cout &lt;&lt; src.type() &lt;&lt; endl;</span><br><span class="line">	//cout &lt;&lt; dst.type() &lt;&lt; endl;</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	imshow(&quot;1&quot;, src);</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">Opencv中的归一化</th>
<th align="center">方式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">NORM_MINMAX</td>
<td align="center">$$dst ( i , j ) = \frac { [ src ( i , j ) - m i n ( src ( x , y ) ) ] * ( m a x - m i n ) } { m a x ( s r c ( x , y ) ) - m i n ( s r c ( x , y ) ) } + m i n$$</td>
</tr>
<tr>
<td align="center">NORM_INF</td>
<td align="center">$$d s t( i , j ) = \frac { src ( i , j ) } { M a x \vert src ( x , y ) \vert }$$</td>
</tr>
<tr>
<td align="center">NORM_L1</td>
<td align="center">$$d s t ( i , j ) = \frac { src ( i , j ) } { \vert{\sum src ( x , y )}\vert}$$</td>
</tr>
<tr>
<td align="center">NORM_L2</td>
<td align="center">$$d s t ( i , j ) = \frac { src ( i , j ) } { \sqrt { \sum src ( x , y ) ^ 2 } }$$</td>
</tr>
<tr>
<td align="center">NORM_L2 仅有alpha</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">NORM_MINMAX alpha为下限，beta为上限并只在NORM_MINMAX中起作用</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">dtype 当为负，输出在大小深度通道数都等于输入，当为正，输出只在深度与输如不同，不同 的地方由dtype决定；</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">mark 掩码。选择感兴趣区域，选定后只能对该区域进行操作。</td>
<td align="center"></td>
</tr>
</tbody></table>
<hr>
<h2 id="图像的放缩-amp-差值"><a href="#图像的放缩-amp-差值" class="headerlink" title="图像的放缩 &amp; 差值"></a>图像的放缩 &amp; 差值</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//差值</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	Mat zoomin, zoomout;</span><br><span class="line">	int h = src.rows;</span><br><span class="line">	int w = src.cols;</span><br><span class="line">	resize(src, zoomin, Size(w / 2, h / 2), 0, 0, INTER_LINEAR);</span><br><span class="line">	// 输入，输出，变化大小，按x，y倍数放缩，变换方式</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	imshow(&quot;1&quot;, zoomin);</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">代码</th>
<th align="center">差值方法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">INTER_NEAREST</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">INTER_LINEAR</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">INTER_CUBIC</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">INTER_LANCZOS4</td>
<td align="center"></td>
</tr>
</tbody></table>
<hr>
<h2 id="图像翻转"><a href="#图像翻转" class="headerlink" title="图像翻转"></a>图像翻转</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//翻转</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	Mat dst;</span><br><span class="line">	flip(src, dst, 0);</span><br><span class="line">	//input, output,0(上下翻转)、-1(180°旋转)、1(左右翻转)</span><br><span class="line">	imshow(&quot;1&quot;, dst);</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line">//旋转</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	Mat dst, M, dst1;</span><br><span class="line">	int w = src.cols;</span><br><span class="line">	int h = src.rows;</span><br><span class="line">	M = getRotationMatrix2D(Point(w/2,h/2),15,1.0);</span><br><span class="line">	//中心位置,旋转角度, 图像本身像素</span><br><span class="line">	//旋转后大小为 cos * w + sin * h,sin * w + cos * h;</span><br><span class="line">	double cos = abs(M.at&lt;double&gt;(0, 0));</span><br><span class="line">	double sin = abs(M.at&lt;double&gt;(0, 1));</span><br><span class="line">	warpAffine(src, dst1, M, src.size(), INTER_LINEAR, 0);</span><br><span class="line">	int nw = cos * w + sin * h;//需要更新 新图像大小</span><br><span class="line">	int nh = sin * w + cos * h;</span><br><span class="line">	M.at&lt;double&gt;(0, 2) += (nw / 2 - w / 2);//X方向偏移量</span><br><span class="line">	M.at&lt;double&gt;(1, 2) += (nh / 2 - h / 2);//Y方向偏移量</span><br><span class="line">	warpAffine(src, dst, M, Size(nw, nh), INTER_LINEAR, 0);</span><br><span class="line">	</span><br><span class="line">	//Input, Output, 变换矩阵, size, 差值, 边缘处理, 颜色 </span><br><span class="line">	imshow(&quot;1&quot;, dst);</span><br><span class="line">	imshow(&quot;2&quot;, dst1);</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>Opencv的小小学习计划</category>
      </categories>
      <tags>
        <tag>Opencv</tag>
      </tags>
  </entry>
</search>
