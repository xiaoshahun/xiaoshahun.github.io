<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/05/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>算法的摆烂日记</title>
    <url>/2022/05/27/%E7%AE%97%E6%B3%95%E7%9A%84%E6%91%86%E7%83%82%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<p><img src="/images/huge.png" width="60%" height="30%" align="center/"><br><span id="more"></span></p>
<h1 id="ISBN号码"><a href="#ISBN号码" class="headerlink" title="ISBN号码"></a>ISBN号码</h1><hr>
<p>描述<br>每一本正式出版的图书都有一个ISBN号码与之对应，ISBN码包括9位数字、1位识别码和3位分隔符，其规定格式如“x-xxx-xxxxx-x”，其中符号“-”就是分隔符（键盘上的减号），最后一位是识别码，例如0-670-82162-4就是一个标准的ISBN码。ISBN码的首位数字表示书籍的出版语言，例如0代表英语；第一个分隔符“-”之后的三位数字代表出版社，例如670代表维京出版社；第二个分隔符后的五位数字代表该书在该出版社的编号；最后一位为识别码。</p>
<p>识别码的计算方法如下：<br>首位数字乘以1加上次位数字乘以2……以此类推，用所得的结果mod 11，所得的余数即为识别码，如果余数为10，则识别码为大写字母X。例如ISBN号码0-670-82162-4中的识别码4是这样得到的：对067082162这9个数字，从左至右，分别乘以1，2，…,9,再求和，即0×1+6×2+……+2×9=158，然后取158 mod 11的结果4作为识别码。</p>
<p>你的任务是编写程序判断输入的ISBN号码中识别码是否正确，如果正确，则仅输出“Right”；如果错误，则输出你认为是正确的ISBN号码。</p>
<p>格式<br>输入格式<br>输入只有一行，是一个字符序列，表示一本书的ISBN号码（保证输入符合ISBN号码的格式要求）。</p>
<p>输出格式<br>输出共一行，假如输入的ISBN号码的识别码正确，那么输出“Right”，否则，按照规定的格式，输出正确的ISBN号码（包括分隔符“-”）。</p>
<p>样例1<br>样例输入1<br>0-670-82162-4<br>Copy<br>样例输出1<br>Right<br>Copy<br>样例2<br>样例输入2<br>0-670-82162-0<br>Copy<br>样例输出2<br>0-670-82162-4<br>Copy<br>限制<br>各个测试点1s<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	string x, x1;</span><br><span class="line">	cin &gt;&gt; x;</span><br><span class="line">	x1 = x;</span><br><span class="line">	x1.erase(1, 1);</span><br><span class="line">	x1.erase(4, 1);//erase(begin,len)去除指定位置字符串</span><br><span class="line">	int nums = 0;</span><br><span class="line">	for (int i = 0; i &lt; 9; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		nums += (x1[i] - 48) * (i + 1);</span><br><span class="line">	&#125;</span><br><span class="line">	int last_numb = nums % 11;</span><br><span class="line">	if (last_numb == 10)</span><br><span class="line">	&#123;</span><br><span class="line">		if (&#x27;X&#x27; - 48 == x[12] - 48)</span><br><span class="line">			cout &lt;&lt; &quot;Right&quot; &lt;&lt; endl;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			x = x.replace(12, 12, &quot;X&quot;);</span><br><span class="line">			cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	if (last_numb == x[12] - 48)</span><br><span class="line">		cout &lt;&lt; &quot;Right&quot; &lt;&lt; endl;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		x = x.replace(12, 12, to_string(last_numb));//replace(begin,end,replace_string)替换特定位置字符串</span><br><span class="line">		cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>PS:这题纯模拟就行，小心大小写！！</p>
<hr>
<h1 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h1><hr>
<p>描述<br>若一个数（首位不为零）从左向右读与从右向左读都一样，我们就将其称之为回文数。</p>
<p>例如：给定一个10进制数56，将56加65（即把56从右向左读），得到121是一个回文数。</p>
<p>又如：对于10进制数87：<br>STEP1：87+78 = 165 STEP2：165+561 = 726<br>STEP3：726+627 = 1353 STEP4：1353+3531 = 4884<br>在这里的一步是指进行了一次N进制的加法，上例最少用了4步得到回文数4884。</p>
<p>写一个程序，给定一个N（2&lt;=N&lt;=10或N=16）进制数M，其中16进制数字为0-9与A-F，求最少经过几步可以得到回文数。如果在30步以内（包含30步）不可能得到回文数，则输出“Impossible!”</p>
<p>格式<br>输入格式<br>共两行<br>第一行为进制数N（2&lt;=N&lt;=10或N=16）<br>第二行为N进制数M（0&lt;=M&lt;=maxlongint）</p>
<p>输出格式<br>共一行<br>第一行为“STEP=”加上经过的步数或“Impossible!”</p>
<p>样例1<br>样例输入1<br>9<br>87<br>Copy<br>样例输出1<br>STEP=6<br>Copy<br>限制<br>各个测试点1s</p>
<h2 id><a href="#" class="headerlink" title></a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;  </span><br><span class="line">#include&lt;cstring&gt;  </span><br><span class="line">#include&lt;cstdio&gt;  </span><br><span class="line">using namespace std;</span><br><span class="line">string x;</span><br><span class="line">int jz, n, a[10001], s = 1;</span><br><span class="line">int pdhw(int n)</span><br><span class="line">&#123;</span><br><span class="line">    for (int i = 1; i &lt;= n / 2; i++)</span><br><span class="line">        if (a[i] != a[n - i + 1])</span><br><span class="line">            return 0;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line">int jf(int n)</span><br><span class="line">&#123;</span><br><span class="line">    int c[10001] = &#123; 0 &#125;, s = 1;</span><br><span class="line">    for (int i = 1; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i] = a[i] + a[n - i + 1] + c[i];</span><br><span class="line">        c[i + 1] += c[i] / jz;</span><br><span class="line">        c[i] %= jz;//很妙的进制转换加法</span><br><span class="line">    &#125;</span><br><span class="line">    if (c[n + 1] != 0)</span><br><span class="line">        n++;</span><br><span class="line">    for (int i = n; i &gt;= 1; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        a[s] = c[i];</span><br><span class="line">        s++;</span><br><span class="line">    &#125;//重新赋值</span><br><span class="line">    return n;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	cin &gt;&gt; jz &gt;&gt; x;</span><br><span class="line">    n = x.size();</span><br><span class="line">    for (int i = 1; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (x[i - 1] &lt; 65)</span><br><span class="line">            a[i] = x[i - 1] - &#x27;0&#x27;;</span><br><span class="line">        else</span><br><span class="line">            a[i] = x[i - 1] - 55;</span><br><span class="line">    &#125;//十进制进位   重回起</span><br><span class="line">    while (s &lt;= 30)</span><br><span class="line">    &#123;</span><br><span class="line">        if (pdhw(n) == 1)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; &quot;STEP=&quot; &lt;&lt; s - 1;</span><br><span class="line">            system(&quot;pause&quot;);</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        s++;</span><br><span class="line">        n = jf(n);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; &quot;Impossible!&quot;;</span><br><span class="line">    system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><h1 id="数独验证"><a href="#数独验证" class="headerlink" title="数独验证"></a>数独验证</h1><hr>
<p>背景<br>XX学校风靡一款智力游戏，也就是数独（九宫格），先给你一个数独，并需要你验证是否符合规则。</p>
<p>描述<br>具体规则如下:<br>每一行都用到1,2,3,4,5,6,7,8,9，位置不限，<br>每一列都用到1,2,3,4,5,6,7,8,9，位置不限，<br>每3×3的格子（共九个这样的格子）都用到1,2,3,4,5,6,7,8,9，位置不限，<br>游戏的过程就是用1,2,3,4,5,6,7,8,9填充空白，并要求满足每行、每列、每个九宫格都用到1,2,3,4,5,6,7,8,9。</p>
<p>如下是一个正确的数独:<br>5 8 1 4 9 3 7 6 2<br>9 6 3 7 1 2 5 8 4<br>2 7 4 8 6 5 9 3 1<br>1 2 9 5 4 6 3 7 8<br>4 3 6 1 8 7 2 9 5<br>7 5 8 3 2 9 1 4 6<br>8 9 2 6 7 1 4 5 3<br>6 1 5 9 3 4 8 2 7<br>3 4 7 2 5 8 6 1 9</p>
<p>格式<br>输入格式<br>输入n个数独，你来验证它是否违反规则.<br>第一行为数独个数，第二行开始为第一个数独，之后为第二个，至第n个.<br>注意！每个数独之间有一个回车隔开!</p>
<p>输出格式<br>若正确则输出”Right”若不正确则输出”Wrong” 输出一个换一行</p>
<p>样例1<br>样例输入1<br>2<br>5 8 1 4 9 3 7 6 2<br>9 6 3 7 1 2 5 8 4<br>2 7 4 8 6 5 9 3 1<br>1 2 9 5 4 6 3 7 8<br>4 3 6 1 8 7 2 9 5<br>7 5 8 3 2 9 1 4 6<br>8 9 2 6 7 1 4 5 3<br>6 1 5 9 3 4 8 2 7<br>3 4 7 2 5 8 6 1 9</p>
<p>1 2 3 4 5 6 7 8 9<br>2 3 4 5 6 7 8 9 1<br>3 4 5 6 7 8 9 1 2<br>4 5 6 7 8 9 1 2 3<br>5 6 7 8 9 1 2 3 4<br>6 7 8 9 1 2 3 4 5<br>7 8 9 1 2 3 4 5 6<br>8 9 1 2 3 4 5 6 7<br>9 1 2 3 4 5 6 7 8<br>Copy<br>样例输出1<br>Right<br>Wrong<br>Copy<br>限制<br>各个测试点1s</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;  </span><br><span class="line">#include&lt;cstring&gt;  </span><br><span class="line">#include&lt;cstdio&gt;  </span><br><span class="line">#include &quot;math.h&quot;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">queue&lt;int&gt; b1;</span><br><span class="line"></span><br><span class="line">bool a1(int a[9][9])</span><br><span class="line">&#123;</span><br><span class="line">	int nums, nums1;</span><br><span class="line">	for (int i = 0; i &lt; 9; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		nums = 1;</span><br><span class="line">		nums1 = 1;</span><br><span class="line">		for (int j = 0; j &lt; 9; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			nums *= a[i][j];</span><br><span class="line">			nums1 *= a[j][i];</span><br><span class="line">		&#125;</span><br><span class="line">		if (nums != 362880 || nums1 != 362880)</span><br><span class="line">		&#123;</span><br><span class="line">			return 0;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return 1;</span><br><span class="line">&#125;</span><br><span class="line">bool jiu(int a[9][9])</span><br><span class="line">&#123;</span><br><span class="line">	int n = 0;</span><br><span class="line">	int nums, nums1;</span><br><span class="line">	while (1)</span><br><span class="line">	&#123;</span><br><span class="line">		nums = 1;</span><br><span class="line">		nums1 = 1;</span><br><span class="line">		for (int i = n; i &lt; n + 3; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			for (int j = n; j &lt; n + 3; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				nums *= a[i][j];</span><br><span class="line">				nums1 *= a[j][i];</span><br><span class="line">				//cout &lt;&lt; nums &lt;&lt; &quot; &quot; &lt;&lt; nums1 &lt;&lt; &quot; &quot; &lt;&lt; n &lt;&lt; endl;				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		if (nums != 362880 || nums1 != 362880)</span><br><span class="line">		&#123;</span><br><span class="line">			return 0;</span><br><span class="line">		&#125;</span><br><span class="line">		n = n + 3;</span><br><span class="line">		if (n &gt;= 9)</span><br><span class="line">			break;</span><br><span class="line">	&#125;</span><br><span class="line">	return 1;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	int u = n;</span><br><span class="line">	while (n--)</span><br><span class="line">	&#123;</span><br><span class="line">		int a[9][9];</span><br><span class="line">		for (int i = 0; i &lt; 9; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			for (int j = 0; j &lt; 9; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				cin &gt;&gt; a[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		if (a1(a) == 0 || jiu(a) == 0)</span><br><span class="line">			b1.push(0);</span><br><span class="line">		else</span><br><span class="line">			b1.push(1);</span><br><span class="line">	&#125;</span><br><span class="line">	while (u--)</span><br><span class="line">	&#123;</span><br><span class="line">		if (!b1.empty())</span><br><span class="line">		&#123;</span><br><span class="line">			if (b1.front() == 1)</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; &quot;Right&quot; &lt;&lt; endl;</span><br><span class="line">			&#125;</span><br><span class="line">			else</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; &quot;Wrong&quot; &lt;&lt; endl;</span><br><span class="line">			&#125;</span><br><span class="line">			b1.pop();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PS:没什么难度的东西， 注意输出格式 和九宫格判断即可</p>
<hr>
<h1 id="合并果子"><a href="#合并果子" class="headerlink" title="合并果子"></a>合并果子</h1><hr>
<p>描述<br>在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。<br>每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过n-1次合并之后，就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。<br>因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为1，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。<br>例如有3种果子，数目依次为1，2，9。可以先将1、2堆合并，新堆数目为3，耗费体力为3。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为12，耗费体力为12。所以多多总共耗费体力=3+12=15。可以证明15为最小的体力耗费值。</p>
<p>格式<br>输入格式<br>输入包括两行，第一行是一个整数n(1&lt;＝n&lt;=10000)，表示果子的种类数。第二行包含n个整数，用空格分隔，第i个整数ai(1&lt;＝ai&lt;=20000)是第i种果子的数目。</p>
<p>输出格式<br>输出包括一行，这一行只包含一个整数，也就是最小的体力耗费值。输入数据保证这个值小于2^31。</p>
<p>样例1<br>样例输入1<br>3<br>1 2 9<br>Copy<br>样例输出1<br>15<br>Copy<br>限制<br>每个测试点1s</p>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;  </span><br><span class="line">#include&lt;cstring&gt;  </span><br><span class="line">#include&lt;cstdio&gt;  </span><br><span class="line">#include &quot;math.h&quot;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	int* a = new int[n];</span><br><span class="line">	for (int i = 0; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	sort(a, a + n);//快速排序函数  时间复杂度 n*log2(n)</span><br><span class="line">	int sum = 0;</span><br><span class="line">	for (int i = 1; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i] += a[i - 1];</span><br><span class="line">		sum += a[i];</span><br><span class="line">		sort(a + i, a + n);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">	system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>PS: 虽然简单  但耗时巨长  优化空间巨大<br>priority_queue<int, vector<int>, greater&lt;&gt;&gt; a; //优先队列 升序  greater&lt;&gt; -&gt; less&lt;&gt; 则为降序</int,></p>
<hr>
<h1 id="均分纸牌"><a href="#均分纸牌" class="headerlink" title="均分纸牌"></a>均分纸牌</h1><hr>
<p>描述<br>有 N 堆纸牌，编号分别为 1，2，…, N。每堆上有若干张，但纸牌总数必为 N 的倍数。可以在任一堆上取若于张纸牌，然后移动。</p>
<p>移牌规则为：在编号为 1 堆上取的纸牌，只能移到编号为 2 的堆上；在编号为 N 的堆上取的纸牌，只能移到编号为 N-1 的堆上；其他堆上取的纸牌，可以移到相邻左边或右边的堆上。</p>
<p>现在要求找出一种移动方法，用最少的移动次数使每堆上纸牌数都一样多。</p>
<p>例如 N=4，4 堆纸牌数分别为：<br>①　9　②　8　③　17　④　6<br>移动3次可达到目的：<br>从 ③ 取 4 张牌放到 ④ （9 8 13 10） -&gt; 从 ③ 取 3 张牌放到 ②（9 11 10 10）-&gt; 从 ② 取 1 张牌放到①（10 10 10 10）。</p>
<p>格式<br>输入格式<br>N（N 堆纸牌，1 &lt;= N &lt;= 100）<br>A1 A2 … An （N 堆纸牌，每堆纸牌初始数，l&lt;= Ai &lt;=10000）</p>
<p>输出格式<br>所有堆均达到相等时的最少移动次数。</p>
<p>样例1<br>样例输入1<br>4<br>9 8 17 6<br>Copy<br>样例输出1<br>3<br>Copy<br>限制<br>每个测试点1s</p>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;  </span><br><span class="line">#include&lt;cstring&gt;  </span><br><span class="line">#include&lt;cstdio&gt;  </span><br><span class="line">#include &quot;math.h&quot;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	int* a = new int[n];</span><br><span class="line">	int num = 0;</span><br><span class="line">	for (int i = 0; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; a[i];</span><br><span class="line">		num += a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	int mean = num / n;</span><br><span class="line">	int outpt = 0;</span><br><span class="line">	/*for (int i = 0; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;*/</span><br><span class="line">	if (a[n - 1] - a[0] == 0)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; outpt &lt;&lt; endl;</span><br><span class="line">		system(&quot;pause&quot;);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	for (int i = 0; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if (a[i] &gt;  mean)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i + 1] += a[i] - mean;</span><br><span class="line">			outpt++;</span><br><span class="line">		&#125;</span><br><span class="line">		else if (a[i] &lt; mean)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i + 1] -= mean - a[i];</span><br><span class="line">			outpt++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; outpt &lt;&lt; endl;</span><br><span class="line">	system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="外观数列"><a href="#外观数列" class="headerlink" title="外观数列"></a>外观数列</h1><hr>
<p>给定一个正整数 n ，输出外观数列的第 n 项。</p>
<p>「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。</p>
<p>你可以将其视作是由递归公式定义的数字字符串序列：</p>
<p>countAndSay(1) = “1”<br>countAndSay(n) 是对 countAndSay(n-1) 的描述，然后转换成另一个数字字符串。<br>前五项如下：</p>
<ol>
<li>1</li>
<li>11</li>
<li>21</li>
<li>1211</li>
<li>111221<br>第一项是数字 1<br>描述前一项，这个数是 1 即 “ 一 个 1 ”，记作 “11”<br>描述前一项，这个数是 11 即 “ 二 个 1 ” ，记作 “21”<br>描述前一项，这个数是 21 即 “ 一 个 2 + 一 个 1 ” ，记作 “1211”<br>描述前一项，这个数是 1211 即 “ 一 个 1 + 一 个 2 + 二 个 1 ” ，记作 “111221”<br>要 描述 一个数字字符串，首先要将字符串分割为 最小 数量的组，每个组都由连续的最多 相同字符 组成。然后对于每个组，先描述字符的数量，然后描述字符，形成一个描述组。要将描述转换为数字字符串，先将每组中的字符数量用数字替换，再将所有描述组连接起来。</li>
</ol>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string countAndSay(int n) </span><br><span class="line">&#123;</span><br><span class="line">	if (n == 1)</span><br><span class="line">		return &quot;1&quot;;</span><br><span class="line">	string a1 = countAndSay(n - 1); //递归法</span><br><span class="line">	string s = &quot;&quot;;</span><br><span class="line">	char temp = a1[0];</span><br><span class="line">	int num = 0;</span><br><span class="line">	for (int i = 0; i &lt;= a1.size(); i++)//有点越界</span><br><span class="line">	&#123;</span><br><span class="line">		if (a1[i] == temp)</span><br><span class="line">			num++;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			s += to_string(num) + temp;//上一次+num累计+现存？？？</span><br><span class="line">			cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">			temp = a1[i];</span><br><span class="line">			num = 1;//因为已经存在这个数  则默认从0开始</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="删除链表的倒数第N个节点"><a href="#删除链表的倒数第N个节点" class="headerlink" title="删除链表的倒数第N个节点"></a>删除链表的倒数第N个节点</h1><hr>
<p><img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" alt="示例一"><br>示例 1：</p>
<p>输入：head = [1,2,3,4,5], n = 2<br>输出：[1,2,3,5]<br>示例 2：</p>
<p>输入：head = [1], n = 1<br>输出：[]<br>示例 3：</p>
<p>输入：head = [1,2], n = 1<br>输出：[1]</p>
<hr>
<p>非递归做法：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * struct ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode *next;</span><br><span class="line"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span><br><span class="line"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="line"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* removeNthFromEnd(ListNode* head, int n) &#123;</span><br><span class="line">        ListNode* temp = head;</span><br><span class="line">        int num = length(head) - n;</span><br><span class="line">        if(num == 0)</span><br><span class="line">        return head-&gt;next;</span><br><span class="line">        for(int i = 0;i&lt;num - 1;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">        return head;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">int length(ListNode* head) &#123;</span><br><span class="line">    int len = 0;</span><br><span class="line">    while (head != NULL) &#123;</span><br><span class="line">        len++;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    return len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int length(ListNode* head) &#123;</span><br><span class="line">    if(head == NULL)</span><br><span class="line">    return 0;</span><br><span class="line">    return length(head-&gt;next) + 1;</span><br><span class="line">&#125;//递归写法  计算链表长度</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>双指针做法：</p>
<h2 id="-1"><a href="#-1" class="headerlink" title></a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* removeNthFromEnd(ListNode* head, int n) &#123;</span><br><span class="line">        ListNode *fast = head;//fast先跑类似于标记  last处理删除元素</span><br><span class="line">        ListNode *last = head;</span><br><span class="line">        for(int i = 0;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        if(fast == NULL)</span><br><span class="line">        return head-&gt;next;</span><br><span class="line">        for(int i = 0;fast-&gt;next != NULL;i++) //寻找到倒数第n+1个元素</span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            last = last-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        last-&gt;next = last-&gt;next-&gt;next;</span><br><span class="line">        return head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></h2><h1 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h1><hr>
<p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg" alt="图一"></p>
<p>示例 1：</p>
<p>输入：l1 = [1,2,4], l2 = [1,3,4]<br>输出：[1,1,2,3,4,4]<br>示例 2：</p>
<p>输入：l1 = [], l2 = []<br>输出：[]<br>示例 3：</p>
<p>输入：l1 = [], l2 = [0]<br>输出：[0]</p>
<hr>
<p>方法一<br>弄个新链表 判断大小依次放入即可<br>方法二<br>递归存入</p>
<h2 id="-2"><a href="#-2" class="headerlink" title></a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * struct ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode *next;</span><br><span class="line"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span><br><span class="line"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="line"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) &#123;</span><br><span class="line">        ListNode* list3;</span><br><span class="line">        if(list1 == NULL)//退出条件</span><br><span class="line">        &#123;</span><br><span class="line">            list3 = list2;</span><br><span class="line">            return list3;</span><br><span class="line">        &#125;</span><br><span class="line">        if(list2 == NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            list3 = list1;</span><br><span class="line">            return list3;</span><br><span class="line">        &#125;</span><br><span class="line">            if(list1-&gt;val &gt; list2-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">                list3= list2;</span><br><span class="line">                list3-&gt;next = mergeTwoLists(list1, list2-&gt;next);//递归 </span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                list3 = list1;</span><br><span class="line">                list3-&gt;next = mergeTwoLists(list1-&gt;next, list2);</span><br><span class="line">            &#125;</span><br><span class="line">        return list3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></h2><h1 id="回文链表"><a href="#回文链表" class="headerlink" title="回文链表"></a>回文链表</h1><hr>
<p>示例 1：<br><img src="https://assets.leetcode.com/uploads/2021/03/03/pal1linked-list.jpg" alt="图一"><br>输入：head = [1,2,2,1]<br>输出：true<br>示例 2:<br><img src="https://assets.leetcode.com/uploads/2021/03/03/pal2linked-list.jpg" alt="图一"><br>输入：head = [1,2]<br>输出：false</p>
<hr>
<h2 id="-3"><a href="#-3" class="headerlink" title></a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//方法一</span><br><span class="line">//最笨的方法  统计长度  指针值对比</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool isPalindrome(ListNode* head) &#123;</span><br><span class="line">        ListNode* head1 = head;</span><br><span class="line">        int n = length(head) / 2;</span><br><span class="line">        for(int i = 0; i&lt;n; i++)</span><br><span class="line">        head1 = head1-&gt;next;</span><br><span class="line"></span><br><span class="line">        head1 = reverseList(head1);</span><br><span class="line">        for(int i = 0; i&lt;n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(head-&gt;val != head1-&gt;val)</span><br><span class="line">            return 0;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            head1 = head1-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        return 1;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ListNode* reverseList(ListNode* head) &#123;</span><br><span class="line">        ListNode* before = NULL;</span><br><span class="line">        ListNode* latter = NULL;</span><br><span class="line">        while(head)</span><br><span class="line">        &#123;</span><br><span class="line">            before = head;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            before-&gt;next = latter;</span><br><span class="line">            latter = before;</span><br><span class="line">        &#125;</span><br><span class="line">        return before;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    int length(ListNode* head)</span><br><span class="line">    &#123;</span><br><span class="line">        int num = 0;</span><br><span class="line">        while(head != NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            num++;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        return num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//优化计数   快慢指针</span><br><span class="line">    bool isPalindrome(ListNode* head) &#123;</span><br><span class="line">        ListNode* before = head;</span><br><span class="line">        ListNode* latter = before;</span><br><span class="line">        while(before != NULL &amp;&amp; before-&gt;next != NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            before = before-&gt;next-&gt;next;</span><br><span class="line">            latter = latter-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        if(before != NULL)</span><br><span class="line">        latter = latter-&gt;next;</span><br><span class="line">        latter = reverseList(latter);</span><br><span class="line">        while(latter != NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            if(head-&gt;val != latter-&gt;val)</span><br><span class="line">            return 0;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            latter = latter-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        return 1;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></h2><h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><hr>
<p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。<br>示例 1：<br><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="图一"><br>输入：head = [1,2,3,4,5]<br>输出：[5,4,3,2,1]</p>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//方法一</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* reverseList(ListNode* head) &#123;</span><br><span class="line">        ListNode* before = NULL;</span><br><span class="line">        ListNode* latter = NULL;</span><br><span class="line">        while(head)</span><br><span class="line">        &#123;</span><br><span class="line">            before = head;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">            before-&gt;next = latter;</span><br><span class="line">            latter = before;</span><br><span class="line">        &#125;</span><br><span class="line">        return before;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//方法二  递归写法</span><br><span class="line">//递归可以让链表倒着输出 -.-</span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* reverseList(ListNode* head) &#123;</span><br><span class="line">        if(head == NULL || head-&gt;next == NULL)</span><br><span class="line">        return head;</span><br><span class="line">        ListNode* reverse = reverseList(head-&gt;next);</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = NULL;</span><br><span class="line">        return reverse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h1><hr>
<p>给你一个链表的头节点 head ，判断链表中是否有环。</p>
<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。</p>
<p>如果链表中存在环 ，则返回 true 。 否则，返回 false 。</p>
<p>示例 1：<br><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" alt="picture 1"><br>输入：head = [3,2,0,-4], pos = 1<br>输出：true<br>解释：链表中有一个环，其尾部连接到第二个节点。</p>
<p>示例 2：<br>！<a href="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png">picture 2</a><br>输入：head = [1], pos = -1<br>输出：false<br>解释：链表中没有环。</p>
<hr>
<p>```<br>//快慢指针  一个指针跑的快 一个慢  总会有相等的时候<br>class Solution {<br>public:<br>    bool hasCycle(ListNode <em>head) {<br>        if(head == NULL || head-&gt;next == NULL)<br>        return 0;<br>        ListNode</em> before = head;<br>        ListNode* latter = head;<br>        int num = 0;<br>        while(before != NULL &amp;&amp; before-&gt;next != NULL)<br>        {<br>            before = before-&gt;next-&gt;next;<br>            latter = latter-&gt;next;<br>            if(before == latter)<br>            return 1;<br>        }<br>        return 0;</p>
<pre><code>&#125;
</code></pre><p>};</p>
<p>//set容器<br>set基本概念<br>所有元素都会在插入时自动排序</p>
<p>set不允许容器中有重复的元素</p>
<p>构造：<br>set st; //默认构造函数<br>set(const set &amp;st); //拷贝构造函数<br>赋值：<br>set&amp; operator=(const set &amp;st); // 重载赋值运算符</p>
]]></content>
      <categories>
        <category>算法的小小学习计划</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>小傻混的OPENCV摆烂日记</title>
    <url>/2022/05/20/%E5%B0%8F%E5%82%BB%E6%B7%B7%E7%9A%84OPENCV%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<img src="/images/huge.png" width="60%" height="30%" align="center/">
<span id="more"></span>

<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><hr>
<h2 id="imread-amp-amp-imshow"><a href="#imread-amp-amp-imshow" class="headerlink" title="imread &amp;&amp; imshow"></a>imread &amp;&amp; imshow</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;opencv2/opencv.hpp&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">using namespace cv;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/2.jpg&quot;, IMREAD_GRAYSCALE);//读图片  第二个参数为色彩</span><br><span class="line">	if (src.empty())//判断图像是否读取成功</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; &quot;no image&quot; &lt;&lt; endl;</span><br><span class="line">		return -1;</span><br><span class="line">	&#125;</span><br><span class="line">	namedWindow(&quot;input&quot;, WINDOW_FREERATIO);//自由拉伸窗口</span><br><span class="line">	imshow(&quot;input&quot;, src);//只支持256色8位，浮动</span><br><span class="line">	waitKey(0);//0为停止  其余数字停顿x毫秒</span><br><span class="line">	destroyAllWindows();//销毁之前窗口</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">imread第二参数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">IMREAD_ANYCOLOR</td>
<td align="center">彩色图像</td>
</tr>
<tr>
<td align="center">IMREAD_ANYDEPTH</td>
<td align="center">任意深度图像</td>
</tr>
<tr>
<td align="center">IMREAD_GRAYSCALE</td>
<td align="center">灰度图</td>
</tr>
</tbody></table>
<p><em>imshow 不能超过640x640</em><br><em>imread 读取路径不能有空格要跟名字完全一致</em></p>
<hr>
<h2 id="imwrite-amp-amp-图像格式转换"><a href="#imwrite-amp-amp-图像格式转换" class="headerlink" title="imwrite &amp;&amp; 图像格式转换"></a>imwrite &amp;&amp; 图像格式转换</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void colorSpace(Mat&amp; image)</span><br><span class="line">&#123;</span><br><span class="line">	Mat gray, hsv;</span><br><span class="line">	cvtColor(image, hsv, COLOR_BGR2HSV);//hsv图像为image（BGR）图像hsv转换后的图像</span><br><span class="line">    //H(0~180)(颜色) S(饱和度) V(亮度)</span><br><span class="line">	cvtColor(image, gray, COLOR_BGR2GRAY);//gray图像为image图像的灰度图</span><br><span class="line">	imwrite(&quot;D:/0/gray.jpg&quot;, gray);//保存图像至D:/0/gray.jpg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="图像的创建与赋值-amp-amp-空白图像的创建"><a href="#图像的创建与赋值-amp-amp-空白图像的创建" class="headerlink" title="图像的创建与赋值 &amp;&amp; 空白图像的创建"></a>图像的创建与赋值 &amp;&amp; 空白图像的创建</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/2.jpg&quot;);</span><br><span class="line">	//创建--克隆    出现新的地址</span><br><span class="line">	Mat m1 = src.clone();</span><br><span class="line">	//复制    出现新的地址</span><br><span class="line">	Mat m2;</span><br><span class="line">	src.copyTo(m2);</span><br><span class="line">	//赋值    m3指针的指向改变</span><br><span class="line">	Mat m3 = src;</span><br><span class="line">	//创建空白图像</span><br><span class="line">	Mat m4 = Mat::zeros(Size(512, 512), CV_8UC3);//CV_8UC3   8位无符号char三通道图片</span><br><span class="line">	//cout &lt;&lt; m4.cols &lt;&lt; &quot; &quot; &lt;&lt; m4.rows &lt;&lt; &quot; &quot; &lt;&lt; m4.channels() &lt;&lt; endl;//获取图像宽、高、通道数</span><br><span class="line">	m4 = Scalar(0, 255, 0);//给全部像素通道赋值</span><br><span class="line">	//cout &lt;&lt; m4 &lt;&lt; endl;</span><br><span class="line">	imshow(&quot;创建图像&quot;, m4);</span><br><span class="line">	</span><br><span class="line">	waitKey(0);	</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="图像像素的读取和操作"><a href="#图像像素的读取和操作" class="headerlink" title="图像像素的读取和操作"></a>图像像素的读取和操作</h2><p>对图像的操作索引有两种方式：row and col ； 指针索引<br>dims不同返回的值的格式也不同</p>
<h3 id="行列索引"><a href="#行列索引" class="headerlink" title="行列索引"></a>行列索引</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/2.jpg&quot;);</span><br><span class="line">	int w = src.cols;//宽</span><br><span class="line">	int h = src.rows;//高</span><br><span class="line">	int dims = src.channels();//通道</span><br><span class="line">	//根据row  and  col来索引</span><br><span class="line">	for (int rows = 0; rows &lt; h; rows++)//两个for遍历图片所有像素</span><br><span class="line">	&#123;</span><br><span class="line">		for (int cols = 0; cols &lt; w; cols++)</span><br><span class="line">		&#123;</span><br><span class="line">			//dims通道数判断  通道不同返回值不同</span><br><span class="line">			if (dims == 1)//灰度图</span><br><span class="line">			&#123;</span><br><span class="line">				int pv = src.at&lt;uchar&gt;(rows, cols);//像素读取</span><br><span class="line">				src.at&lt;uchar&gt;(rows, cols) = 255 - pv;//像素改写</span><br><span class="line">			&#125;</span><br><span class="line">			if (dims == 3)//RGB 彩图</span><br><span class="line">			&#123;</span><br><span class="line">				Vec3b bgr = src.at&lt;Vec3b&gt;(rows, cols);</span><br><span class="line">				//像素读取   3通道  一个像素  3个值    Vec3b类似于int数组</span><br><span class="line">				src.at&lt;Vec3b&gt;(rows,cols)[0] = 255 - bgr[0];//像素改写</span><br><span class="line">				src.at&lt;Vec3b&gt;(rows, cols)[1] = 255 - bgr[1];</span><br><span class="line">				src.at&lt;Vec3b&gt;(rows, cols)[2] = 255 - bgr[2];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	imshow(&quot;input&quot;, src);</span><br><span class="line">	waitKey(0);	</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="指针索引"><a href="#指针索引" class="headerlink" title="指针索引"></a>指针索引</h3><p>相较于 row和col的索引<br>指针索引效率更高  但如果不仔细指针所带来的问题难以发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/2.jpg&quot;);</span><br><span class="line">	int w = src.cols;//宽</span><br><span class="line">	int h = src.rows;//高</span><br><span class="line">	int dims = src.channels();//通道</span><br><span class="line">	for (int rows = 0; rows &lt; h; rows++)//两个for遍历图片所有像素</span><br><span class="line">	&#123;</span><br><span class="line">		uchar* current_rows = src.ptr&lt;uchar&gt;(rows);//姑且认为像素指针的储存是连续的</span><br><span class="line">		for (int cols = 0; cols &lt; w; cols++)</span><br><span class="line">		&#123;			</span><br><span class="line">			//dims通道数判断  通道不同返回值不同</span><br><span class="line">			if (dims == 1)//灰度图   通过指针的方式获取像素值   并且   改变像素值</span><br><span class="line">			&#123;</span><br><span class="line">				int pv = *current_rows;</span><br><span class="line">				*current_rows++ = 255 - pv;</span><br><span class="line">			&#125;</span><br><span class="line">			if (dims == 3)//RGB 彩图   通过指针的方式获取像素值   并且   改变像素值(3通道就要执行3次)</span><br><span class="line">			&#123;</span><br><span class="line">				*current_rows++ = 255 - *current_rows;</span><br><span class="line">				*current_rows++ = 255 - *current_rows;</span><br><span class="line">				*current_rows++ = 255 - *current_rows;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	imshow(&quot;input&quot;, src);</span><br><span class="line">	waitKey(0);	</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="像素算术法则"><a href="#像素算术法则" class="headerlink" title="像素算术法则"></a>像素算术法则</h2><p>普通的运算法则<br>图像强化…</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/2.jpg&quot;);</span><br><span class="line">	src = src + Scalar(50, 50, 50);//加法/减法/除法 --&gt; +，-，/</span><br><span class="line">	//saturate_cast&lt;uchar&gt;  将范围化成uchar的范围 </span><br><span class="line">	multiply(src, Scalar(20, 20, 20), src);//乘法  越界成255</span><br><span class="line">	add(src, Scalar(20, 20, 20), src);//内置加</span><br><span class="line">	subtract(src, Scalar(20, 20, 20), src);//内置减</span><br><span class="line">	divide(src, Scalar(20, 20, 20), src);//内置除</span><br><span class="line">	imshow(&quot;原&quot;, src);</span><br><span class="line">	waitKey(0);	</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="创建trackbat调整亮度"><a href="#创建trackbat调整亮度" class="headerlink" title="创建trackbat调整亮度"></a>创建trackbat调整亮度</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//createTrackbar  中我们自己需要的函数</span><br><span class="line">void on_track(int lightness, void* src)</span><br><span class="line">&#123;</span><br><span class="line">	Mat m, dst;</span><br><span class="line">	Mat image = *((Mat*)src);</span><br><span class="line">	m = Mat::zeros(image.size(), image.type());</span><br><span class="line">	dst = Mat::zeros(image.size(), image.type());</span><br><span class="line">	m = Scalar(lightness, lightness, lightness);</span><br><span class="line">	add(image, m, dst);</span><br><span class="line">	//subtract,divide,multiply 都行</span><br><span class="line">	//error:: add(src, m, src) 原图像将会一直累加亮度  需用dst作为新的图  src作为基准</span><br><span class="line">	imshow(&quot;原&quot;, dst);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src;</span><br><span class="line">	int max_value = 100;//最大值</span><br><span class="line">	int lightness = 50;//初始值</span><br><span class="line">	src = imread(&quot;D:/0/2.jpg&quot;);</span><br><span class="line">	namedWindow(&quot;亮度调整&quot;, WINDOW_AUTOSIZE);//窗口创建</span><br><span class="line">	createTrackbar(&quot;Value Bar&quot;, &quot;亮度调整&quot;, &amp;lightness, max_value, on_track, (void*)(&amp;src));</span><br><span class="line">	on_track(lightness, &amp;src);//回调函数</span><br><span class="line">	//初始值、最大值、自带函数、附加值</span><br><span class="line">	waitKey(0);	</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="创建on-track调整亮度-amp-amp-on-contrast调整对比度-不知道为什么-各玩各的？？？？"><a href="#创建on-track调整亮度-amp-amp-on-contrast调整对比度-不知道为什么-各玩各的？？？？" class="headerlink" title="创建on_track调整亮度 &amp;&amp; on_contrast调整对比度(不知道为什么 各玩各的？？？？)"></a>创建on_track调整亮度 &amp;&amp; on_contrast调整对比度(不知道为什么 各玩各的？？？？)</h3><p>on_track不变  多加一个  on_contrast</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static void on_contrast(int contrast_init, void* src1)</span><br><span class="line">&#123;</span><br><span class="line">	Mat m;</span><br><span class="line">	Mat image = *((Mat*)src1);</span><br><span class="line">	m = Mat::zeros(image.size(), image.type());</span><br><span class="line">	m = Scalar(contrast_init, contrast_init, contrast_init);</span><br><span class="line">	double contrast = contrast_init / 100.0;</span><br><span class="line">	addWeighted(image, contrast, m, 0.0, 0, dst);//融合两张图 image alpha m beta gamma dst</span><br><span class="line">	imshow(&quot;xin&quot;, dst);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	src = imread(&quot;D:/0/2.jpg&quot;);</span><br><span class="line">	dst = Mat::zeros(src.size(), src.type());</span><br><span class="line">	namedWindow(&quot;亮度与对比度调整&quot;, WINDOW_AUTOSIZE);//窗口创建</span><br><span class="line">	int max_value = 100;//最大值</span><br><span class="line">	int lightness = 50;//初始值</span><br><span class="line">	int contrast_init = 100;</span><br><span class="line">	int contrast_max = 200;</span><br><span class="line">	createTrackbar(&quot;Value Bar&quot;, &quot;亮度与对比度调整&quot;, &amp;lightness, max_value, on_track, (void*)(&amp;src));</span><br><span class="line">	createTrackbar(&quot;Contrast Bar&quot;, &quot;亮度与对比度调整&quot;, &amp;contrast_init, contrast_max, on_contrast, (void*)(&amp;src));</span><br><span class="line">	//初始值、最大值、自带函数、附加值</span><br><span class="line">	on_track(lightness, &amp;src);</span><br><span class="line">	on_contrast(contrast_init, &amp;src);</span><br><span class="line">	waitKey(0);	</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并没什么难理解<br>addWeighted(src1, alpha, src2, beta, gamma, dst)比较特殊  可以线性融合两张图大小要一致</p>
<table>
<thead>
<tr>
<th align="center">addWeighted参数</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">src1</td>
<td align="center">第一个原数组</td>
</tr>
<tr>
<td align="center">alpha</td>
<td align="center">第一个数组元素权重</td>
</tr>
<tr>
<td align="center">src2</td>
<td align="center">第二个原数组</td>
</tr>
<tr>
<td align="center">beta</td>
<td align="center">第二个数组元素权重</td>
</tr>
<tr>
<td align="center">gamma</td>
<td align="center">图一与图二作和后添加的数值</td>
</tr>
<tr>
<td align="center">dst</td>
<td align="center">输出图片</td>
</tr>
</tbody></table>
<hr>
<h2 id="融合的功能"><a href="#融合的功能" class="headerlink" title="融合的功能"></a>融合的功能</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat a;</span><br><span class="line">	Mat b, dst;</span><br><span class="line">	a = imread(&quot;D:/0/173.jpg&quot;);</span><br><span class="line">	b = imread(&quot;D:/0/177.jpg&quot;);</span><br><span class="line">	addWeighted(a, 0.25, b, 0.5, 2, dst);</span><br><span class="line">	imshow(&quot;xin&quot;, dst);</span><br><span class="line">	namedWindow(&quot;xin&quot;, WINDOW_FREERATIO);</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="伪色彩增强"><a href="#伪色彩增强" class="headerlink" title="伪色彩增强"></a>伪色彩增强</h2><p>可以给灰度图伪上色</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src, dst;</span><br><span class="line">	src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	dst = Mat::zeros(src.size(), src.type());</span><br><span class="line">	applyColorMap(src, dst, COLORMAP_AUTUMN);// 第三个参数为枚举类型</span><br><span class="line">	imshow(&quot;原图&quot;, src);</span><br><span class="line">	imshow(&quot;新图&quot;, dst);</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="图像像素的逻辑操作"><a href="#图像像素的逻辑操作" class="headerlink" title="图像像素的逻辑操作"></a>图像像素的逻辑操作</h2><p>与、或、非的操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat m1 = Mat::zeros(Size(256, 256),CV_8UC3);</span><br><span class="line">	Mat m2 = Mat::zeros(Size(256, 256), CV_8UC3);</span><br><span class="line">	//rectangle(image, Rect(), Scarlar(), thickness, linetype, 0);</span><br><span class="line">	//rect(x, y, width, height)</span><br><span class="line">	rectangle(m1, Rect(100, 100, 80, 80), Scalar(255, 255, 0), -1, LINE_8, 0);</span><br><span class="line">	rectangle(m2, Rect(100, 100, 80, 80), Scalar(255, 0, 255), -1, LINE_8, 0);</span><br><span class="line">	//在图像中对像素点操作</span><br><span class="line">	//imshow(&quot;m1&quot;, m1);</span><br><span class="line">	Mat m3;</span><br><span class="line">	bitwise_and(m1, m2, m3);//与操作 图像都1的地方</span><br><span class="line">	//bitwise_or(m1, m2, m3);//或操作  图像有1的东方</span><br><span class="line">	//bitwise_not(m1, m3);//非操作 ~也是取非操作</span><br><span class="line">	//bitwise_xor(m1, m2, m3);//异或操作  且的位置取反</span><br><span class="line">	imshow(&quot;m3&quot;, m3);</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="通道的分离和融合"><a href="#通道的分离和融合" class="headerlink" title="通道的分离和融合"></a>通道的分离和融合</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	vector&lt;Mat&gt; mv;//Mat类型的容器</span><br><span class="line">	split(src, mv);//分离彩色图像的 R G B 通道</span><br><span class="line">	imshow(&quot;蓝色&quot;, mv[0]);</span><br><span class="line">	imshow(&quot;绿色&quot;, mv[1]);</span><br><span class="line">	imshow(&quot;黄色&quot;, mv[2]);</span><br><span class="line"></span><br><span class="line">	//将G B通道置0 融合到新图像中 就可以仅显示单色图像</span><br><span class="line">	Mat dst;</span><br><span class="line">	mv[1] = 0;</span><br><span class="line">	mv[2] = 0;</span><br><span class="line">	merge(mv, dst);//融合分离的图像</span><br><span class="line">	imshow(&quot;蓝&quot;, dst);</span><br><span class="line">	int from_to[] = &#123; 0, 2, 1, 1, 2, 0 &#125;;//偶数下标的用来标识输入矩阵，奇数下标的用来标识输出矩阵。若是偶数下标为负数，那么相应的输出矩阵为零矩阵。</span><br><span class="line">	mixChannels(&amp;src, 1, &amp;dst, 1, from_to, 3);//通道混合</span><br><span class="line">	//输入矩阵的向量(相同大小和深度)， 输入矩阵的个数， 输出矩阵的向量(事先分配空间)， 输出矩阵个数， 序号对向量， 序号对数</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="色彩空间的转换"><a href="#色彩空间的转换" class="headerlink" title="色彩空间的转换"></a>色彩空间的转换</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//色彩空间转换</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	Mat hsv;</span><br><span class="line">	cvtColor(src, hsv, COLOR_BGR2HSV);//src变为HSV类型</span><br><span class="line">	Mat mask;</span><br><span class="line">	inRange(hsv, Scalar(35, 43, 46), Scalar(77, 255, 255), mask);</span><br><span class="line">	//图像， 提取颜色最小值， 最大值， 新图像</span><br><span class="line">	Mat redback = Mat::zeros(src.size(), src.type());</span><br><span class="line">	bitwise_not(mask, mask);//将颜色取反有颜色变为黑色</span><br><span class="line">	imshow(&quot;mask&quot;, mask);</span><br><span class="line">	src.copyTo(redback, mask);//mask中为0的src中变为黑，不为0的不变，将扣出的部分放入redback中</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="像素值统计"><a href="#像素值统计" class="headerlink" title="像素值统计"></a>像素值统计</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//像素值统计</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	vector&lt;Mat&gt;mv;//Mat容器</span><br><span class="line">	split(src, mv);//分离通道</span><br><span class="line">	double minv0, maxv0;</span><br><span class="line">	Point minLoc, maxLoc;//</span><br><span class="line">	for (int i = 0; i &lt; mv.size(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		minMaxLoc(mv[i], &amp;minv0, &amp;maxv0, &amp;minLoc, &amp;maxLoc, Mat());</span><br><span class="line">		//图像必须是单通道，计算矩阵最大值、最小值、最大值位置、最小值位置</span><br><span class="line">		//cout &lt;&lt; minv0 &lt;&lt; &quot; &quot; &lt;&lt; maxv0 &lt;&lt; endl;</span><br><span class="line">	&#125; </span><br><span class="line">	Mat mean, stddev;</span><br><span class="line">	meanStdDev(src, mean, stddev);//计算矩阵的均值和标准偏差。</span><br><span class="line">	double mean1, mean2, mean3;</span><br><span class="line">	mean1 = mean.at&lt;double&gt;(0, 0);//取得单通道的均值</span><br><span class="line">	mean2 = mean.at&lt;double&gt;(1, 0);</span><br><span class="line">	mean3 = mean.at&lt;double&gt;(2, 0);</span><br><span class="line">	cout &lt;&lt; mean1 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; mean2 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; mean3 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; mean &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; stddev &lt;&lt; endl;</span><br><span class="line">	system(&quot;pause&quot;);</span><br><span class="line">	//waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若得到的方差为0，均值恒定，则图片对比度非常低….近似纯色图，无信息</p>
<hr>
<h2 id="几何图像绘制"><a href="#几何图像绘制" class="headerlink" title="几何图像绘制"></a>几何图像绘制</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//几何图像绘制</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	Rect rect;</span><br><span class="line">	rect.x = 100;</span><br><span class="line">	rect.y = 100;//左上角</span><br><span class="line">	rect.width = 200;</span><br><span class="line">	rect.height = 200;//右下角</span><br><span class="line">	Mat m1 = Mat::zeros(src.size(), src.type());</span><br><span class="line">	rectangle(m1, rect, Scalar(255, 0, 0), -1, 8);//画矩阵</span><br><span class="line">	//在input上画Point的形状，颜色为Scalar，-1代表填充,8代表线型</span><br><span class="line">	circle(m1, Point(100, 100), 15, Scalar(0, 255, 0), 3, 8);//画圆</span><br><span class="line">	//在input上画Point的形状，圆半径，颜色，线长，线型</span><br><span class="line">	line(m1, Point(100, 100), Point(200, 200), Scalar(0, 0, 255), 3, 8);//画线</span><br><span class="line">	//在input上画线，起点，终点，颜色，线宽，线型</span><br><span class="line">	RotatedRect rrt;</span><br><span class="line">	rrt.center = Point(200, 200);//圆心</span><br><span class="line">	rrt.size = Size(300, 150);//长径，短径</span><br><span class="line">	rrt.angle = 5.0;//旋转角度  逆时针</span><br><span class="line">	ellipse(src, rrt, Scalar(255, 255, 0), 2, 8);</span><br><span class="line">	Mat dst;</span><br><span class="line">	addWeighted(src, 0.7, m1, 0.6, 2, dst);</span><br><span class="line">	imshow(&quot;1&quot;, dst);</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="随机"><a href="#随机" class="headerlink" title="随机"></a>随机</h2><p>我感觉RNG rng()是伪随机？？？？？<br>得在参数加入系统时间才能做到真随机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//随机</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	Mat m1 = Mat::zeros(Size(512, 512), CV_8UC3);</span><br><span class="line">	int w = m1.cols;</span><br><span class="line">	int h = m1.rows;</span><br><span class="line">	RNG rng(12345);//伪随机</span><br><span class="line">	//RNG rng((unsigned)time(NULL));//真随机</span><br><span class="line">	int x1, x2, y1, y2;</span><br><span class="line">	for (int i = 0;; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		x1 = rng.uniform(0, w);//随机产生0-w之间的数</span><br><span class="line">		y1 = rng.uniform(0, h);</span><br><span class="line">		x2 = rng.uniform(0, w);</span><br><span class="line">		y2 = rng.uniform(0, h);</span><br><span class="line">		line(m1, Point(x1, y1), Point(x2, y2), Scalar(rng.uniform(0, 255),</span><br><span class="line">			rng.uniform(0, 255), rng.uniform(0, 255)), 3, 8);</span><br><span class="line">		if (i == 10)</span><br><span class="line">		&#123;</span><br><span class="line">			m1 = Scalar(0, 0, 0);</span><br><span class="line">		&#125;</span><br><span class="line">		imshow(&quot;1&quot;, m1);</span><br><span class="line">		waitKey(1000);</span><br><span class="line">	&#125;</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="多边形绘制-amp-填充"><a href="#多边形绘制-amp-填充" class="headerlink" title="多边形绘制 &amp; 填充"></a>多边形绘制 &amp; 填充</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//多边形的小故事</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	Mat m1 = Mat::zeros(Size(512, 512), CV_8UC3);</span><br><span class="line">	Point p1(100, 100);</span><br><span class="line">	Point p2(350, 100);</span><br><span class="line">	Point p3(450, 280);</span><br><span class="line">	Point p4(320, 450);</span><br><span class="line">	Point p5(80, 400);</span><br><span class="line">	vector&lt;Point&gt;pts;</span><br><span class="line">	pts.push_back(p1);</span><br><span class="line">	pts.push_back(p2);</span><br><span class="line">	pts.push_back(p3);</span><br><span class="line">	pts.push_back(p4);</span><br><span class="line">	pts.push_back(p5);</span><br><span class="line">	//fillPoly(m1, pts, Scalar(0, 255, 255), 8, 0);//不知道为什么报错</span><br><span class="line">	polylines(m1, pts, true, Scalar(255, 0, 0), 3, 8, 0);//画多边形</span><br><span class="line">	//底图，Point容器，是否封闭，颜色，线宽，线型，相对位移(原点)</span><br><span class="line">	vector&lt;vector&lt;Point&gt;&gt;contours;//这玩意有点逆天</span><br><span class="line">	contours.push_back(pts);</span><br><span class="line">	drawContours(m1, contours, 0, Scalar(0, 255, 255), -1);</span><br><span class="line">	//input, vector类型的vector, 画第几个多边形，颜色, 线宽（填充）</span><br><span class="line">	imshow(&quot;1&quot;, m1);</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="归一化？！！！"><a href="#归一化？！！！" class="headerlink" title="归一化？！！！"></a>归一化？！！！</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//归一化！！！！！！！！！</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	Mat dst;</span><br><span class="line">	src.convertTo(src, CV_32F);//将src变为浮点型</span><br><span class="line">	normalize(src, dst, 0, 1.0, NORM_MINMAX);</span><br><span class="line">	//InputArray, OutputArray, alpha, beta, norm_type(归一化方式), dtype(与InputArray类型一直), mask</span><br><span class="line">	//cout &lt;&lt; src.type() &lt;&lt; endl;</span><br><span class="line">	//cout &lt;&lt; dst.type() &lt;&lt; endl;</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	imshow(&quot;1&quot;, src);</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">Opencv中的归一化</th>
<th align="center">方式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">NORM_MINMAX</td>
<td align="center">$$dst ( i , j ) = \frac { [ src ( i , j ) - m i n ( src ( x , y ) ) ] * ( m a x - m i n ) } { m a x ( s r c ( x , y ) ) - m i n ( s r c ( x , y ) ) } + m i n$$</td>
</tr>
<tr>
<td align="center">NORM_INF</td>
<td align="center">$$d s t( i , j ) = \frac { src ( i , j ) } { M a x \vert src ( x , y ) \vert }$$</td>
</tr>
<tr>
<td align="center">NORM_L1</td>
<td align="center">$$d s t ( i , j ) = \frac { src ( i , j ) } { \vert{\sum src ( x , y )}\vert}$$</td>
</tr>
<tr>
<td align="center">NORM_L2</td>
<td align="center">$$d s t ( i , j ) = \frac { src ( i , j ) } { \sqrt { \sum src ( x , y ) ^ 2 } }$$</td>
</tr>
<tr>
<td align="center">NORM_L2 仅有alpha</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">NORM_MINMAX alpha为下限，beta为上限并只在NORM_MINMAX中起作用</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">dtype 当为负，输出在大小深度通道数都等于输入，当为正，输出只在深度与输如不同，不同 的地方由dtype决定；</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">mark 掩码。选择感兴趣区域，选定后只能对该区域进行操作。</td>
<td align="center"></td>
</tr>
</tbody></table>
<hr>
<h2 id="图像的放缩-amp-差值"><a href="#图像的放缩-amp-差值" class="headerlink" title="图像的放缩 &amp; 差值"></a>图像的放缩 &amp; 差值</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//差值</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	Mat zoomin, zoomout;</span><br><span class="line">	int h = src.rows;</span><br><span class="line">	int w = src.cols;</span><br><span class="line">	resize(src, zoomin, Size(w / 2, h / 2), 0, 0, INTER_LINEAR);</span><br><span class="line">	// 输入，输出，变化大小，按x，y倍数放缩，变换方式</span><br><span class="line">	//system(&quot;pause&quot;);</span><br><span class="line">	imshow(&quot;1&quot;, zoomin);</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">代码</th>
<th align="center">差值方法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">INTER_NEAREST</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">INTER_LINEAR</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">INTER_CUBIC</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">INTER_LANCZOS4</td>
<td align="center"></td>
</tr>
</tbody></table>
<hr>
<h2 id="图像翻转"><a href="#图像翻转" class="headerlink" title="图像翻转"></a>图像翻转</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//翻转</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	Mat dst;</span><br><span class="line">	flip(src, dst, 0);</span><br><span class="line">	//input, output,0(上下翻转)、-1(180°旋转)、1(左右翻转)</span><br><span class="line">	imshow(&quot;1&quot;, dst);</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line">//旋转</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	Mat src = imread(&quot;D:/0/smartAuto/ole_image/0.jpg&quot;);</span><br><span class="line">	Mat dst, M, dst1;</span><br><span class="line">	int w = src.cols;</span><br><span class="line">	int h = src.rows;</span><br><span class="line">	M = getRotationMatrix2D(Point(w/2,h/2),15,1.0);</span><br><span class="line">	//中心位置,旋转角度, 图像本身像素</span><br><span class="line">	//旋转后大小为 cos * w + sin * h,sin * w + cos * h;</span><br><span class="line">	double cos = abs(M.at&lt;double&gt;(0, 0));</span><br><span class="line">	double sin = abs(M.at&lt;double&gt;(0, 1));</span><br><span class="line">	warpAffine(src, dst1, M, src.size(), INTER_LINEAR, 0);</span><br><span class="line">	int nw = cos * w + sin * h;//需要更新 新图像大小</span><br><span class="line">	int nh = sin * w + cos * h;</span><br><span class="line">	M.at&lt;double&gt;(0, 2) += (nw / 2 - w / 2);//X方向偏移量</span><br><span class="line">	M.at&lt;double&gt;(1, 2) += (nh / 2 - h / 2);//Y方向偏移量</span><br><span class="line">	warpAffine(src, dst, M, Size(nw, nh), INTER_LINEAR, 0);</span><br><span class="line">	</span><br><span class="line">	//Input, Output, 变换矩阵, size, 差值, 边缘处理, 颜色 </span><br><span class="line">	imshow(&quot;1&quot;, dst);</span><br><span class="line">	imshow(&quot;2&quot;, dst1);</span><br><span class="line">	waitKey(0);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>Opencv的小小学习计划</category>
      </categories>
      <tags>
        <tag>Opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32的学习</title>
    <url>/2022/11/07/STM32%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<img src="/images/huge.png" width="60%" height="30%" align="center/">
<span id="more"></span>

<h1 id="GPIO的初始化与使能"><a href="#GPIO的初始化与使能" class="headerlink" title="GPIO的初始化与使能"></a>GPIO的初始化与使能</h1><hr>
<p>端口配置低寄存器(GPIOx_CRL)<br>    [0:7]低八位的模式设置<br>端口配置高寄存器(GPIOx_CRH)<br>    [8:15]高八位的模式设置<br>端口输入数据寄存器(GPIOx_IDR)<br>    [0:15]读出的值为对应I/O口的状态。<br>端口输出数据寄存器(GPIOx_ODR)<br>    [0:15]可以分别地对各个ODR位进行独立的设置/清除。<br>端口位设置/清除寄存器(GPIOx_BSRR)<br>    [0:15]位有效，设置端口x的y位（0无影响，1对应位置1）<br>端口位清除寄存器(GPIOx_BRR)<br>    [0:15]位有效，清除端口x的y位（0无影响，1清除位）<br>端口配置锁定寄存器(GPIOx_LCKR)<br>    [0:15]锁定端口<br>LED.c</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void LED_init()</span><br><span class="line">&#123;</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStrute;//GPIO结构体</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE|RCC_APB2Periph_GPIOB,ENABLE); //使能时钟</span><br><span class="line">	GPIO_InitStrute.GPIO_Pin = GPIO_Pin_5;//pin端口</span><br><span class="line">	GPIO_InitStrute.GPIO_Mode = GPIO_Mode_Out_PP;//推挽输出</span><br><span class="line">	GPIO_InitStrute.GPIO_Speed = GPIO_Speed_50MHz;//输出速度	</span><br><span class="line">	GPIO_Init(GPIOB,&amp;GPIO_InitStrute);//初始化GPIO</span><br><span class="line">	GPIO_SetBits(GPIOB,GPIO_Pin_5);//控制BSRR, 输出高</span><br><span class="line">	GPIO_Init(GPIOE,&amp;GPIO_InitStrute);//初始化GPIO</span><br><span class="line">	GPIO_SetBits(GPIOE,GPIO_Pin_5);//控制BSRR, 输出高</span><br><span class="line">&#125;</span><br><span class="line">void Light()</span><br><span class="line">&#123;</span><br><span class="line">		GPIO_SetBits(GPIOE,GPIO_Pin_5);//控制BSRR, 输出高</span><br><span class="line">		delay_ms(1000);</span><br><span class="line">		GPIO_ResetBits(GPIOE,GPIO_Pin_5);//控制BRR， 输出低</span><br><span class="line">		delay_ms(1000);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GPIO_Input.h</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ifndef _GPIO_IN_H</span><br><span class="line">#define _GPIO_IN_H</span><br><span class="line">#include &quot;stm32f10x.h&quot;</span><br><span class="line">#include &quot;delay.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define key3 GPIO_Scan(GPIOE, GPIO_Pin_3)</span><br><span class="line">#define key4 GPIO_Scan(GPIOE, GPIO_Pin_4)</span><br><span class="line">#define key_scan GPIO_ReadInputDataBit(GPIOx, GPIO_Pin)</span><br><span class="line"></span><br><span class="line">void GPIO_IN_Init(void);</span><br><span class="line">int GPIO_Scan(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);</span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>GPIO_Input.c</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;GPIO_IN.h&quot;</span><br><span class="line">void GPIO_IN_Init()</span><br><span class="line">&#123;</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStrute;</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE,ENABLE);</span><br><span class="line">	GPIO_InitStrute.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_3;</span><br><span class="line">	GPIO_InitStrute.GPIO_Mode = GPIO_Mode_IPU;//上拉输入模式</span><br><span class="line">    //输入无速度</span><br><span class="line">	GPIO_Init(GPIOE, &amp;GPIO_InitStrute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int GPIO_Scan(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)</span><br><span class="line">&#123;</span><br><span class="line">	if(key_scan == 0)</span><br><span class="line">	&#123;</span><br><span class="line">		while(key_scan == 0);//松手检测</span><br><span class="line">		return 1;	</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">		return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="bsp中断模式"><a href="#bsp中断模式" class="headerlink" title="bsp中断模式"></a>bsp中断模式</h1><p>中断屏蔽寄存器(EXTI_IMR)<br>    线x上的事件屏蔽<br>事件屏蔽寄存器(EXTI_EMR)<br>    线x上的事件屏蔽<br>上升沿触发选择寄存器(EXTI_RTSR)<br>    线x上的上升沿触发事件配置位(1允许，0禁止)<br>下降沿触发选择寄存器(EXTI_FTSR)<br>     线x上的下降沿触发事件配置位(1允许，0禁止)<br>软件中断事件寄存器(EXTI_SWIER)<br>    线x上的软件中断<br>挂起寄存器(EXTI_PR)<br>    0：没有发生触发请求<br>    1：发生了选择的触发请求</p>
<p>bsp.h</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ifndef __BSP_EXIT_H</span><br><span class="line">#define __BSP_EXIT_H</span><br><span class="line"></span><br><span class="line">#include &quot;stm32f10x_gpio.h&quot;</span><br><span class="line">#include &quot;stm32f10x_exti.h&quot;</span><br><span class="line">#include &quot;core_cm3.h&quot;</span><br><span class="line"></span><br><span class="line">static void NVIC_INIT(void);</span><br><span class="line">void EXIT_INIT(void);</span><br><span class="line">void Systick_delay_ms(uint32_t ms);</span><br><span class="line">void Systick_delay_us(uint32_t us);</span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>bsp.c</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;bsp_exit.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static void NVIC_INIT()//初始化NVIC</span><br><span class="line">&#123;</span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStrute;//NVIC 结构体</span><br><span class="line">	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);// 配置NVIC优先分组</span><br><span class="line">	NVIC_InitStrute.NVIC_IRQChannel = EXTI4_IRQn;//通道选择 与 stm32f10x.h中一致</span><br><span class="line">	NVIC_InitStrute.NVIC_IRQChannelPreemptionPriority = 1;//先占优先级1级</span><br><span class="line">	NVIC_InitStrute.NVIC_IRQChannelSubPriority = 1;//从优先级1级</span><br><span class="line">	NVIC_InitStrute.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStrute);</span><br><span class="line">&#125;</span><br><span class="line">void EXIT_INIT()//初始化EXIT</span><br><span class="line">&#123;</span><br><span class="line">	GPIO_InitTypeDef GPIO_InitStrute;</span><br><span class="line">	EXTI_InitTypeDef EXIT_InitStrute;</span><br><span class="line">	</span><br><span class="line">	//初始化NVIC	</span><br><span class="line">	NVIC_INIT();</span><br><span class="line">  //初始化GPIO</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE,ENABLE); //使能时钟</span><br><span class="line">	GPIO_InitStrute.GPIO_Pin = GPIO_Pin_4;</span><br><span class="line">	GPIO_InitStrute.GPIO_Mode = GPIO_Mode_IN_FLOATING;//浮空输入</span><br><span class="line">	GPIO_Init(GPIOE,&amp;GPIO_InitStrute);//初始化GPIO</span><br><span class="line">	//初始化EXIT</span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);</span><br><span class="line">	GPIO_EXTILineConfig(GPIO_PortSourceGPIOE,GPIO_PinSource4);//选择GPIO口作为exit</span><br><span class="line">	EXIT_InitStrute.EXTI_Line = EXTI_Line4;</span><br><span class="line">	EXIT_InitStrute.EXTI_Mode = EXTI_Mode_Interrupt;//中断模式</span><br><span class="line">	EXIT_InitStrute.EXTI_Trigger = EXTI_Trigger_Rising;//触发模式</span><br><span class="line">	EXIT_InitStrute.EXTI_LineCmd = ENABLE;</span><br><span class="line">	EXTI_Init(&amp;EXIT_InitStrute);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">void Systick_delay_ms(uint32_t ms) //systick系统时钟进行延迟（软件延迟）</span><br><span class="line">&#123;</span><br><span class="line">	uint32_t i;</span><br><span class="line">	SysTick_Config(72000);	</span><br><span class="line">	for(i = 0; i &lt; ms; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		while(!((SysTick-&gt;CTRL) &amp; (1&lt;&lt;16)));//当CTRL置1时（ststick中减数器） 进行下一次循环</span><br><span class="line">	&#125;</span><br><span class="line">	SysTick-&gt;CTRL &amp;= ~SysTick_CTRL_ENABLE_Msk;</span><br><span class="line">&#125;</span><br><span class="line">void Systick_delay_us(uint32_t us)</span><br><span class="line">&#123;</span><br><span class="line">	uint32_t i;</span><br><span class="line">	SysTick_Config(72);</span><br><span class="line">	for(i = 0; i &lt; us; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		while(!((SysTick-&gt;CTRL) &amp; (1&lt;&lt;16)));</span><br><span class="line">	&#125;</span><br><span class="line">	SysTick-&gt;CTRL &amp;= ~SysTick_CTRL_ENABLE_Msk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>中断函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">中断接收信号</span><br><span class="line">void EXTI4_IRQHandler()//中断与startup_stm32f10x_xx.s 中名字一致  否则进入循环</span><br><span class="line">&#123;</span><br><span class="line">	if(EXTI_GetITStatus(EXTI_Line4) != RESET)//产生中断亮灯</span><br><span class="line">	&#123;</span><br><span class="line">		GPIOE-&gt;ODR ^= GPIO_Pin_5;</span><br><span class="line">		GPIOB-&gt;ODR ^= GPIO_Pin_5;</span><br><span class="line">	&#125;</span><br><span class="line">	EXTI_ClearITPendingBit(EXTI_Line4);//清楚标志位</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="串口收发"><a href="#串口收发" class="headerlink" title="串口收发"></a>串口收发</h1><p>usart.h</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ifndef __USART_H</span><br><span class="line">#define __USART_H</span><br><span class="line">#include &quot;stdio.h&quot;	</span><br><span class="line">#include &quot;sys.h&quot; </span><br><span class="line">#define USART_REC_LEN  			200  	//定义最大接收字节数 200</span><br><span class="line">#define EN_USART3_RX 			1		//使能（1）/禁止（0）串口1接收</span><br><span class="line"></span><br><span class="line">extern u8  USART_RX_BUF[USART_REC_LEN]; //接收缓冲,最大USART_REC_LEN个字节.末字节为换行符 </span><br><span class="line">extern u16 USART_RX_STA;         		//接收状态标记	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">extern vu16 USART3_RX_STA;   						//接收数据状态</span><br><span class="line">//如果想串口中断接收，请不要注释以下宏定义</span><br><span class="line">void uart_init(u32 bound);</span><br><span class="line">void USART3_SendData(USART_TypeDef* USARTx, uint8_t Data);</span><br><span class="line">void USART3_SendTwoData(USART_TypeDef* USARTx, uint16_t Data);</span><br><span class="line">void USART3_SendArrayData(USART_TypeDef* USARTx,uint8_t* buf, uint8_t len);</span><br><span class="line">void Receiver_Send(void);</span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>usart.c</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;sys.h&quot;</span><br><span class="line">#include &quot;usart.h&quot;	  </span><br><span class="line"></span><br><span class="line">//加入以下代码,支持printf函数,而不需要选择use MicroLIB	  </span><br><span class="line">#if 1</span><br><span class="line">#pragma import(__use_no_semihosting)             </span><br><span class="line">//标准库需要的支持函数                 </span><br><span class="line">struct __FILE </span><br><span class="line">&#123; </span><br><span class="line">	int handle; </span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">FILE __stdout;       </span><br><span class="line">//定义_sys_exit()以避免使用半主机模式    </span><br><span class="line">void _sys_exit(int x) </span><br><span class="line">&#123; </span><br><span class="line">	x = x; </span><br><span class="line">&#125; </span><br><span class="line">//重定向fputc函数 使用printf</span><br><span class="line">int fputc(int ch, FILE *f)</span><br><span class="line">&#123;     </span><br><span class="line">	USART_SendData(USART3, (uint8_t)ch);</span><br><span class="line">	while(USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);//循环发送,直到发送完毕       </span><br><span class="line">	return ch;</span><br><span class="line">&#125;</span><br><span class="line">//重定向fputc函数 使用scanf</span><br><span class="line">int fgetc(FILE *f)</span><br><span class="line">&#123;</span><br><span class="line">	while(USART_GetFlagStatus(USART3, USART_FLAG_RXNE) == RESET);</span><br><span class="line">	return (int)USART_ReceiveData(USART3);</span><br><span class="line">&#125;</span><br><span class="line">#endif </span><br><span class="line"></span><br><span class="line">#if EN_USART3_RX   //如果使能了接收</span><br><span class="line">//串口3中断服务程序</span><br><span class="line">//注意,读取USARTx-&gt;SR能避免莫名其妙的错误   	</span><br><span class="line">u8 USART_RX_BUF[USART_REC_LEN];     //接收缓冲,最大USART_REC_LEN个字节.</span><br><span class="line">//接收状态</span><br><span class="line">//bit15，	接收完成标志</span><br><span class="line">//bit14，	接收到0x0d</span><br><span class="line">//bit13~0，	接收到的有效字节数目</span><br><span class="line">u16 USART_RX_STA=0;       //接收状态标记	  </span><br><span class="line">  </span><br><span class="line">void uart_init(u32 bound)&#123;</span><br><span class="line">  //GPIO端口设置</span><br><span class="line">  GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">	USART_InitTypeDef USART_InitStructure;</span><br><span class="line">	NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">	 </span><br><span class="line">	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);	//使能USART3，GPIOB时钟</span><br><span class="line">	RCC_APB2PeriphClockCmd( RCC_APB2Periph_AFIO,  ENABLE);</span><br><span class="line">  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);</span><br><span class="line">	</span><br><span class="line">	//USART3_TX   GPIOB.10</span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; //PB.10</span><br><span class="line">  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;	//复用推挽输出</span><br><span class="line">  GPIO_Init(GPIOB, &amp;GPIO_InitStructure);//初始化GPIOB.10</span><br><span class="line">   </span><br><span class="line">  //USAR3_RX	  GPIOB.11初始化</span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;//PB11</span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;//浮空输入</span><br><span class="line">  GPIO_Init(GPIOB, &amp;GPIO_InitStructure);//初始化GPIOB.11 </span><br><span class="line"></span><br><span class="line">  //Usart3 NVIC 配置  使用中断接收</span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3 ;//抢占优先级3</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;		//子优先级3</span><br><span class="line">	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			//IRQ通道使能</span><br><span class="line">	NVIC_Init(&amp;NVIC_InitStructure);	//根据指定的参数初始化VIC寄存器</span><br><span class="line">  </span><br><span class="line">   //USART 初始化设置</span><br><span class="line"></span><br><span class="line">	USART_InitStructure.USART_BaudRate = bound;//串口波特率</span><br><span class="line">	USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式</span><br><span class="line">	USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位</span><br><span class="line">	USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位</span><br><span class="line">	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制</span><br><span class="line">	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式</span><br><span class="line"></span><br><span class="line">  USART_Init(USART3, &amp;USART_InitStructure); //初始化串口3</span><br><span class="line">  USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);//开启串口接受中断</span><br><span class="line">  USART_Cmd(USART3, ENABLE);                    //使能串口3</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">void USART3_SendData(USART_TypeDef* USARTx, uint8_t Data)//发送一个字节</span><br><span class="line">&#123;</span><br><span class="line">	USART_SendData(USARTx, Data);</span><br><span class="line">	while(USART_GetFlagStatus(USARTx, USART_FLAG_TXE) == RESET);//等待发送</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void USART3_SendTwoData(USART_TypeDef* USARTx, uint16_t Data)//发送两个字节</span><br><span class="line">&#123;</span><br><span class="line">	uint8_t h,l;</span><br><span class="line">	l = Data&amp;0xff;</span><br><span class="line">	h = (Data&amp;0xff00) &gt;&gt;8 ;</span><br><span class="line">	USART_SendData(USARTx, h);</span><br><span class="line">	while(USART_GetFlagStatus(USARTx, USART_FLAG_TXE) == RESET);//等待发送</span><br><span class="line">	USART_SendData(USARTx, l);</span><br><span class="line">	while(USART_GetFlagStatus(USARTx, USART_FLAG_TXE) == RESET);//等待发送</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void USART3_SendArrayData(USART_TypeDef* USARTx,uint8_t* buf, uint8_t len)//发送两个字节</span><br><span class="line">&#123;</span><br><span class="line">	uint8_t i;</span><br><span class="line">	for(i = 0; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		USART_SendData(USARTx, buf[i]);</span><br><span class="line">		while(USART_GetFlagStatus(USARTx, USART_FLAG_TXE) == RESET);//等待发送</span><br><span class="line">	&#125;</span><br><span class="line">	while(USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET);//等待发送</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Receiver_Send()</span><br><span class="line">&#123;</span><br><span class="line">	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);//设置分组</span><br><span class="line">	u16 t;  </span><br><span class="line">	u16 len;</span><br><span class="line">	if(USART_RX_STA&amp;0x8000)</span><br><span class="line">		&#123;				   </span><br><span class="line">			len=USART_RX_STA&amp;0x3fff;//得到此次接收到的数据长度</span><br><span class="line">			printf(&quot;\r\n您发送的消息为:\r\n\r\n&quot;);</span><br><span class="line">			for(t=0;t&lt;len;t++)</span><br><span class="line">			&#123;</span><br><span class="line">				USART_SendData(USART3, USART_RX_BUF[t]);//向串口3发送数据</span><br><span class="line">				while(USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);//等待发送结束</span><br><span class="line">			&#125;</span><br><span class="line">			printf(&quot;\r\n\r\n&quot;);//插入换行</span><br><span class="line">			USART_RX_STA=0;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line">void USART3_IRQHandler(void)                	//串口3中断服务程序</span><br><span class="line">	&#123;</span><br><span class="line">	u8 Res;</span><br><span class="line">#if SYSTEM_SUPPORT_OS 		//如果SYSTEM_SUPPORT_OS为真，则需要支持OS.</span><br><span class="line">	OSIntEnter();    </span><br><span class="line">#endif</span><br><span class="line">	if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)  //接收中断(接收到的数据必须是0x0d 0x0a结尾)</span><br><span class="line">		&#123;</span><br><span class="line">		Res =USART_ReceiveData(USART3);	//读取接收到的数据</span><br><span class="line">		</span><br><span class="line">		if((USART_RX_STA&amp;0x8000)==0)//接收未完成</span><br><span class="line">			&#123;</span><br><span class="line">			if(USART_RX_STA&amp;0x4000)//接收到了0x0d</span><br><span class="line">				&#123;</span><br><span class="line">				if(Res!=0x0a)USART_RX_STA=0;//接收错误,重新开始</span><br><span class="line">				else USART_RX_STA|=0x8000;	//接收完成了 </span><br><span class="line">				&#125;</span><br><span class="line">			else //还没收到0X0D</span><br><span class="line">				&#123;	</span><br><span class="line">				if(Res==0x0d)USART_RX_STA|=0x4000;</span><br><span class="line">				else</span><br><span class="line">					&#123;</span><br><span class="line">					USART_RX_BUF[USART_RX_STA&amp;0X3FFF]=Res ;</span><br><span class="line">					USART_RX_STA++;</span><br><span class="line">					if(USART_RX_STA&gt;(USART_REC_LEN-1))USART_RX_STA=0;//接收数据错误,重新开始接收	  </span><br><span class="line">					&#125;		 </span><br><span class="line">				&#125;</span><br><span class="line">			&#125;   		 </span><br><span class="line">     &#125; </span><br><span class="line">#if SYSTEM_SUPPORT_OS 	//如果SYSTEM_SUPPORT_OS为真，则需要支持OS.</span><br><span class="line">	OSIntExit();  											 </span><br><span class="line">#endif</span><br><span class="line">&#125; </span><br><span class="line">#endif	</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="DMA功能"><a href="#DMA功能" class="headerlink" title="DMA功能"></a>DMA功能</h1><p>DMA通过专属的通道进行数据传输  不占用CPU</p>
<p>DMP.h</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ifndef __DMA_H</span><br><span class="line">#define __DMA_H</span><br><span class="line">#include &quot;stm32f10x.h&quot;</span><br><span class="line">#include &quot;stm32f10x_dma.h&quot;</span><br><span class="line"></span><br><span class="line">#define BUFFER_SIZE 32 //存储器到存储器的最大传输字节</span><br><span class="line">#define SEND_BUFFER_SIZE 5000 // 存储器到外设的最大传输字节</span><br><span class="line">	</span><br><span class="line">#define USART_DR_ADDR ((USART3_BASE+0x04)) // DR寄存器的地址</span><br><span class="line"></span><br><span class="line">void MtM_DMA_Config(void);</span><br><span class="line">void MtP_DMA_Config(void);</span><br><span class="line">uint8_t Buffercmp(const uint32_t* pBuffer, uint32_t* pBuffer1, uint16_t len);</span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>DMP.c</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;DMA.h&quot;</span><br><span class="line">#include &quot;stdio.h&quot;	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//  uint32_t DMA_PeripheralBaseAddr;//外设地址</span><br><span class="line">//  uint32_t DMA_MemoryBaseAddr;    //存储器地址</span><br><span class="line">//  uint32_t DMA_DIR;         			//传输方向</span><br><span class="line">//  uint32_t DMA_BufferSize;        //传输数目                        </span><br><span class="line">//  uint32_t DMA_PeripheralInc;     //外设地址增量模式                        </span><br><span class="line">//  uint32_t DMA_MemoryInc;      		//存储器地址增量模式</span><br><span class="line">//  uint32_t DMA_PeripheralDataSize;//外设数据宽度</span><br><span class="line">//  uint32_t DMA_MemoryDataSize			//存储器数据宽度</span><br><span class="line">//  uint32_t DMA_Mode;          		//模式选择</span><br><span class="line">//  uint32_t DMA_Priority;        	//通道优先级</span><br><span class="line">//  uint32_t DMA_M2M;               //存储器到存储器模式</span><br><span class="line"></span><br><span class="line">const uint32_t SRC_Const_Buffer[BUFFER_SIZE] = &#123;</span><br><span class="line">	0x01020304, 0x05060708, 0x090A0B0C, 0X0D0E0F10,</span><br><span class="line">	0x01020304, 0x05060708, 0x090A0B0C, 0X0D0E0F10,</span><br><span class="line">	0x01020304, 0x05060708, 0x090A0B0C, 0X0D0E0F10,</span><br><span class="line">	0x01020304, 0x05060708, 0x090A0B0C, 0X0D0E0F10,</span><br><span class="line">&#125;;</span><br><span class="line">uint32_t DST_Buffer[BUFFER_SIZE];</span><br><span class="line">uint8_t Send_Buffer[SEND_BUFFER_SIZE];</span><br><span class="line"></span><br><span class="line">void MtM_DMA_Config()</span><br><span class="line">&#123;</span><br><span class="line">	DMA_InitTypeDef DMA_InitStrute;</span><br><span class="line">	</span><br><span class="line">	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);</span><br><span class="line"></span><br><span class="line">	DMA_InitStrute.DMA_MemoryBaseAddr     = (uint32_t)DST_Buffer;</span><br><span class="line">	DMA_InitStrute.DMA_PeripheralBaseAddr = (uint32_t)SRC_Const_Buffer;</span><br><span class="line">	DMA_InitStrute.DMA_DIR = DMA_DIR_PeripheralSRC;// M to M 为SRC</span><br><span class="line">	DMA_InitStrute.DMA_BufferSize = BUFFER_SIZE;</span><br><span class="line">	DMA_InitStrute.DMA_MemoryInc = DMA_MemoryInc_Enable;//目的地址是否自增</span><br><span class="line">	DMA_InitStrute.DMA_PeripheralInc = DMA_PeripheralInc_Enable;//源地址是否自增</span><br><span class="line">	DMA_InitStrute.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;</span><br><span class="line">	DMA_InitStrute.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;</span><br><span class="line">	DMA_InitStrute.DMA_Mode = DMA_Mode_Normal;//DMA模式</span><br><span class="line">	DMA_InitStrute.DMA_Priority = DMA_Priority_High;//DMA优先级</span><br><span class="line">	DMA_InitStrute.DMA_M2M = DMA_M2M_Enable;//是否为M to M</span><br><span class="line">	</span><br><span class="line">	DMA_Init(DMA1_Channel6, &amp;DMA_InitStrute);</span><br><span class="line">	DMA_ClearFlag(DMA1_FLAG_TC6);</span><br><span class="line">	DMA_Cmd(DMA1_Channel6, ENABLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//判断数组的是否一致</span><br><span class="line">uint8_t Buffercmp(const uint32_t* pBuffer, uint32_t* pBuffer1, uint16_t len)</span><br><span class="line">&#123;</span><br><span class="line">	while(len--)</span><br><span class="line">	&#123;</span><br><span class="line">		if(*pBuffer != *pBuffer1)</span><br><span class="line">			return 0;</span><br><span class="line">		pBuffer ++;</span><br><span class="line">		pBuffer1 ++;</span><br><span class="line">	&#125;</span><br><span class="line">	return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MtP_DMA_Config()</span><br><span class="line">&#123;</span><br><span class="line">	DMA_InitTypeDef DMA_InitStrute;</span><br><span class="line">	</span><br><span class="line">	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);</span><br><span class="line"></span><br><span class="line">	DMA_InitStrute.DMA_MemoryBaseAddr     = (uint32_t)Send_Buffer;</span><br><span class="line">	DMA_InitStrute.DMA_PeripheralBaseAddr = (uint32_t)USART_DR_ADDR;</span><br><span class="line">	DMA_InitStrute.DMA_DIR = DMA_DIR_PeripheralDST;// M to P 为DST</span><br><span class="line">	DMA_InitStrute.DMA_BufferSize = SEND_BUFFER_SIZE;</span><br><span class="line">	DMA_InitStrute.DMA_MemoryInc = DMA_MemoryInc_Enable;</span><br><span class="line">	DMA_InitStrute.DMA_PeripheralInc = DMA_PeripheralInc_Disable;</span><br><span class="line">	DMA_InitStrute.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;</span><br><span class="line">	DMA_InitStrute.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;</span><br><span class="line">	</span><br><span class="line">	DMA_InitStrute.DMA_Mode = DMA_Mode_Normal;</span><br><span class="line">	DMA_InitStrute.DMA_Priority = DMA_Priority_High;</span><br><span class="line">	DMA_InitStrute.DMA_M2M = DMA_M2M_Disable;</span><br><span class="line">	</span><br><span class="line">	DMA_Init(DMA1_Channel2, &amp;DMA_InitStrute);</span><br><span class="line">	DMA_ClearFlag(DMA1_FLAG_GL2);</span><br><span class="line">	DMA_Cmd(DMA1_Channel2, ENABLE);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
]]></content>
  </entry>
  <entry>
    <title>python与C++联合编程</title>
    <url>/2022/11/10/python%E4%B8%8EC++%E8%81%94%E5%90%88%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="/images/huge.png" width="60%" height="30%" align="center/"><br><span id="more"></span></p>
<h1 id="python-多进程与通信队列"><a href="#python-多进程与通信队列" class="headerlink" title="python 多进程与通信队列"></a>python 多进程与通信队列</h1><hr>
<p>PS.Python多进程是假多进程存在互斥锁</p>
<h2 id><a href="#" class="headerlink" title></a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from threading import Thread</span><br><span class="line">from threading import Lock</span><br><span class="line">from queue import Queue</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">is_runing = True #控制进程停止</span><br><span class="line">#互斥锁</span><br><span class="line">mux = Lock()</span><br><span class="line">products = Queue()</span><br><span class="line"></span><br><span class="line">class Producer(Thread):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        print(&quot;Producer Created!&quot;)</span><br><span class="line"></span><br><span class="line">    def run(seld):</span><br><span class="line">         print(&quot;In Producer Thread&quot;)</span><br><span class="line">         product_id = 1000</span><br><span class="line">         while is_runing:</span><br><span class="line">             product_id += 1</span><br><span class="line">             mux.acquire() #开启互斥锁</span><br><span class="line">             print(&quot;produce a product &quot;, product_id)</span><br><span class="line">             products.put(product_id) #将进程存入通信队列</span><br><span class="line">             mux.release() #关闭互斥锁</span><br><span class="line">             time.sleep(1) #等待1s</span><br><span class="line"></span><br><span class="line">         print(&quot;Produced a exied&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Consumer(Thread):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        Thread.__init__(self)</span><br><span class="line">        print(&quot;Consumer Created!&quot;)</span><br><span class="line"></span><br><span class="line">    def run(seld):</span><br><span class="line">        print(&quot;In Consumer Thread&quot;)</span><br><span class="line">        while is_runing:</span><br><span class="line">            mux.acquire()</span><br><span class="line">            if(products.empty()):</span><br><span class="line">                mux.release()</span><br><span class="line">                continue</span><br><span class="line">            print(&quot;consumer a product &quot;, products.get()) #得到队列中内容</span><br><span class="line">            mux.release()</span><br><span class="line">            time.sleep(1)</span><br><span class="line">        print(&quot;Consumer a exied&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">producer = Producer()</span><br><span class="line">consumer = Consumer()</span><br><span class="line">producer.start()</span><br><span class="line">consumer.start()</span><br><span class="line"></span><br><span class="line">ths = [producer, consumer]</span><br><span class="line"></span><br><span class="line">time.sleep(5)</span><br><span class="line">is_runing = False</span><br><span class="line">for th in ths:</span><br><span class="line">    th.join()</span><br><span class="line">print(&quot;主线程退出&quot;)</span><br></pre></td></tr></table></figure></h2><h1 id="try的用法"><a href="#try的用法" class="headerlink" title="try的用法"></a>try的用法</h1><hr>
<p>类似与goto 容易出bug<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">list1 = [1]</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    print(list1[2])</span><br><span class="line">except IndexError:</span><br><span class="line">    print(&quot;Error&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">     print(list1[6])</span><br><span class="line">except IndexError as e: # 打印错误理由</span><br><span class="line">    print(&quot;IndexError&quot;, e)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(&quot;Unknow Error&quot;, e)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;no Error&quot;)</span><br><span class="line">finally: #任何情况执行</span><br><span class="line">    print(&quot;Everything&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#自定义错误类型</span><br><span class="line">class XError(Exception):</span><br><span class="line">    def __init__(self, value=&quot;&quot;):</span><br><span class="line">        self.value = value</span><br><span class="line">    #用来print</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &quot;XError : &quot; + str(self.value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    raise XError(&quot;test error&quot;)</span><br><span class="line">except XError as e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p><img src="file:///D:/0/Blog/blo/source/images/swap.png" alt="类型转换"></p>
<hr>
<h1 id="Ctypes专栏"><a href="#Ctypes专栏" class="headerlink" title="Ctypes专栏"></a>Ctypes专栏</h1><h2 id="—"><a href="#—" class="headerlink" title="—-"></a>—-</h2><p>Pycharm 中代码</p>
<h2 id="-1"><a href="#-1" class="headerlink" title></a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">from ctypes import *</span><br><span class="line"># 导入库  Windows不加dll</span><br><span class="line"># lib = ctypes.cdll.LoadLibrary(&#x27;./pyAndcpp.dll&#x27;)</span><br><span class="line"></span><br><span class="line">lib = cdll.LoadLibrary(&#x27;./pyAndcpp&#x27;)</span><br><span class="line">lib.TestCtypes()# 基础调用</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    lib.TestCtypesNumber(100,c_float(1.01), True)# 传递参数的调用  进行类型转换</span><br><span class="line">except Exception as ex:</span><br><span class="line">    print(&quot;TestCtypesNumber error&quot;, ex)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    str1 = b&quot;test string in python&quot; # 加b进行类型转换 只读string</span><br><span class="line">    lib.TestCtypesString(str1, len(str1))</span><br><span class="line">    str2 = &quot;wide string in python&quot;</span><br><span class="line">    lib.TestCtypesWString(str2, len(str1))</span><br><span class="line">    str3 = create_string_buffer(b&quot;Can modify&quot;) # 创建可修改的空间</span><br><span class="line">    lib.CTestCtypesString(str3, len(str3))</span><br><span class="line">except Exception as ex:</span><br><span class="line">    print(&quot;TestCtypesString error&quot;, ex)</span><br><span class="line"></span><br></pre></td></tr></table></figure></h2><p>CPP中代码</p>
<h2 id="-2"><a href="#-2" class="headerlink" title></a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//C++环境编译C  </span><br><span class="line">//extern &quot;C&quot; __declspec(dllexport)</span><br><span class="line">// __declspec(dllexport)函数导入到库中</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; __declspec(dllexport) void TestCtypes()</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;In C TestCtypes\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; __declspec(dllexport) void TestCtypesNumber(int x, float y, bool z)</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;In C TestCtypesNumber : %d %f %d\n&quot;, x, y, z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; __declspec(dllexport) void TestCtypesString(const char* str, int size)</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;In C String : %s %d\n&quot;, str, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//宽字符传递免于与python间的多次格式转换</span><br><span class="line">extern &quot;C&quot; __declspec(dllexport) void TestCtypesWString(const wchar_t* str, int size)</span><br><span class="line">&#123;</span><br><span class="line">	wprintf(L&quot;In C WString : %ls %d\n&quot;, str, size);//宽字符格式 和 打印</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; __declspec(dllexport) void CTestCtypesString(char* str, int size)# 可修改字符串</span><br><span class="line">&#123;</span><br><span class="line">	str[0] = &#x27;@&#x27;;</span><br><span class="line">	str[1] = &#x27;.&#x27;;</span><br><span class="line">	str[2] = &#x27;@&#x27;;</span><br><span class="line">	printf(&quot;In C CanString : %s %d\n&quot;, str, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></h2><p>获取返回值<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extern &quot;C&quot; __declspec(dllexport) int RetureInt()</span><br><span class="line">&#123;</span><br><span class="line">	return 101;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; __declspec(dllexport) char* RetureChar()</span><br><span class="line">&#123;</span><br><span class="line">	char a[] = &quot;RetureChar&quot;;</span><br><span class="line">	return a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; __declspec(dllexport) wchar_t* RetureWChar()</span><br><span class="line">&#123;</span><br><span class="line">	wchar_t a[] = L&quot;RetureWChar&quot;;</span><br><span class="line">	return a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>CPP</p>
<h2 id="-3"><a href="#-3" class="headerlink" title></a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    str1 = lib.RetureInt()</span><br><span class="line">    print(str1)# return byte</span><br><span class="line">    lib.RetureChar.restype = c_char_p</span><br><span class="line">    str2 = lib.RetureChar()</span><br><span class="line">    print(str2)# return string</span><br><span class="line">    lib.RetureWChar.restype = c_wchar_p</span><br><span class="line">    str3 = lib.RetureWChar()</span><br><span class="line">    print(str3)</span><br><span class="line">except Exception as ex:</span><br><span class="line">    print(&quot;TestCtypesString error&quot;, ex)</span><br></pre></td></tr></table></figure></h2><p>传入指针  和   数组</p>
<p>既可以改变传入的参数内容<br>也可以改变函数中定义的内容<br>python cpp双向修改<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    lib.PointReture.argtypes = (POINTER(c_float),)</span><br><span class="line">    lib.PointReture.restype = POINTER(c_int)</span><br><span class="line">    n1 = c_float(34.5)</span><br><span class="line">    print(n1)</span><br><span class="line">    n2 = lib.PointReture(byref(n1))</span><br><span class="line">    print(n1)</span><br><span class="line">    print(&quot;&quot;)</span><br><span class="line">    # print(n2.contents) #打印n2指针内的值</span><br><span class="line">    # print(type(n2)) # 传入python中类型为c_long</span><br><span class="line">    n2.contents.value = 54 # 可修改Cpp函数中定义的值</span><br><span class="line">    n2 = lib.PointReture(byref(n1))</span><br><span class="line">except Exception as ex:</span><br><span class="line">    print(&quot;TestCtypesString error&quot;, ex)</span><br><span class="line">---</span><br><span class="line">数组传入</span><br><span class="line">try:</span><br><span class="line">    arr = [0,1,2,3,4,5,6,7,8,9]</span><br><span class="line">    # 将arr强制转换为数组类型 c_long_Array_10</span><br><span class="line">    carr = (c_int*len(arr))(*arr)</span><br><span class="line">    lib.ArrayReture(carr, len(arr))</span><br><span class="line">    print(type(carr))</span><br><span class="line">except Exception as ex:</span><br><span class="line">    print(&quot;TestCtypesString error&quot;, ex)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>CPP</p>
<h2 id="-4"><a href="#-4" class="headerlink" title></a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extern &quot;C&quot; __declspec(dllexport) int* PointReture(float * a)</span><br><span class="line">&#123;</span><br><span class="line">	static int n1 = 10;</span><br><span class="line">	*a = 12.3f;</span><br><span class="line">	printf(&quot;In Cpp return value = %d\n&quot;, n1);</span><br><span class="line">	return &amp;n1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; __declspec(dllexport) void ArrayReture(int* arr, int size)</span><br><span class="line">&#123;</span><br><span class="line">	for (int i = 0; i &lt; size; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;%d&quot;, arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><p>传入和返回结构体<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    pos1 = pos(11,22)</span><br><span class="line">    pos2 = pos(33,44)</span><br><span class="line">    pos3 = [pos(1,1),pos(2,2),pos(3,3)]</span><br><span class="line">    posarray = pos*len(pos3)</span><br><span class="line">    # 设定传入参数类型</span><br><span class="line">    lib.TestStruct.argtypes = (pos,POINTER(pos), posarray)</span><br><span class="line">    # 各种方式传递结构体</span><br><span class="line">    lib.TestStruct(pos1, byref(pos2), posarray(*pos3), len(pos3))</span><br><span class="line">    # 指针返回结构体</span><br><span class="line">    lib.TestReturnStruct.restype = POINTER(pos)</span><br><span class="line">    res = lib.TestReturnStruct(pos1, byref(pos2), posarray(*pos3), len(pos3))</span><br><span class="line">    # 有问题 返回类型竟是int</span><br><span class="line">    # lib.TestReturnStruct1.restyps = pos</span><br><span class="line">    # res = lib.TestReturnStruct1()</span><br><span class="line">    print(res)</span><br><span class="line">    print(type(res))</span><br><span class="line">    print(res.x, res.y)</span><br><span class="line">except Exception as ex:</span><br><span class="line">    print(&quot;TestCtypesString error&quot;, ex)</span><br></pre></td></tr></table></figure><br>CPP</p>
<h2 id="-5"><a href="#-5" class="headerlink" title></a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct MyStruct</span><br><span class="line">&#123;</span><br><span class="line">	int x;</span><br><span class="line">	int y;</span><br><span class="line">&#125;;</span><br><span class="line">extern &quot;C&quot; __declspec(dllexport) void TestStruct(MyStruct pos1, MyStruct * pos2, MyStruct * pos3, int size)</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;%d @ %d\n&quot;, pos1.x, pos1.y);</span><br><span class="line">	printf(&quot;------------------------\n&quot;);</span><br><span class="line">	printf(&quot;%d @ %d\n&quot;, pos2-&gt;x, pos2-&gt;y);</span><br><span class="line">	printf(&quot;------------------------\n&quot;);</span><br><span class="line">	for (int i = 0; i &lt; size; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;%d @ %d &quot;, pos3[i].x, pos3[i].y);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; __declspec(dllexport) MyStruct* TestReturnStruct(MyStruct pos1, MyStruct * pos2, MyStruct * pos3, int size)</span><br><span class="line">&#123;</span><br><span class="line">	static MyStruct res;</span><br><span class="line">	res.x = 5;</span><br><span class="line">	res.y = 6;</span><br><span class="line">	return &amp;res;</span><br><span class="line">&#125;</span><br><span class="line">// 返回对象有问题</span><br><span class="line">//extern &quot;C&quot; __declspec(dllexport) MyStruct TestReturnStruct1()</span><br><span class="line">//&#123;</span><br><span class="line">//	MyStruct res;</span><br><span class="line">//	res.x = 5;</span><br><span class="line">//	res.y = 6;</span><br><span class="line">//	return res;</span><br><span class="line">//&#125;</span><br></pre></td></tr></table></figure></h2><p>python调用windows库</p>
<h2 id="-6"><a href="#-6" class="headerlink" title></a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from ctypes import *</span><br><span class="line">import platform</span><br><span class="line"></span><br><span class="line"># 判断系统</span><br><span class="line">判断系统</span><br><span class="line">sys = platform.system()</span><br><span class="line">if sys == &quot;Windows&quot;:</span><br><span class="line">    libs = cdll.LoadLibrary(&#x27;msvcrt&#x27;)</span><br><span class="line">elif sys == &quot;Linux&quot;:</span><br><span class="line">    libs = cdll.LoadLibrary(&#x27;libc.so.6&#x27;)</span><br><span class="line">elif sys == &#x27;Darwin&#x27;:</span><br><span class="line">    libs = cdll.LoadLibrary(&#x27;libc.dylib&#x27;)</span><br><span class="line"></span><br><span class="line">libs.printf(b&quot;Python String : %s %d&quot;, b&quot;str001&quot;, 100)</span><br><span class="line"># 调用windows接口函数</span><br><span class="line"># .encode(&quot;gbk&quot;) 转出gbk编码方式  windows使用</span><br><span class="line">re = windll.user32.MessageBoxA(0, &quot;窗口内容&quot;.encode(&quot;gbk&quot;), &quot;请选择&quot;.encode(&quot;gbk&quot;), 1)</span><br><span class="line">if re == 1:</span><br><span class="line">    windll.user32.MessageBoxW(0, &quot;点击确认&quot;, &quot;已选择&quot;, 0)</span><br><span class="line">else:</span><br><span class="line">    windll.user32.MessageBoxW(0, &quot;点击取消&quot;, &quot;已选择&quot;, 0)</span><br></pre></td></tr></table></figure></h2><p>python调用回调函数</p>
<h2 id="-7"><a href="#-7" class="headerlink" title></a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from ctypes import *</span><br><span class="line">lib = cdll.msvcrt</span><br><span class="line"># python 调用c库快速排序qsort</span><br><span class="line"># 设定 qsort的排序方式 回调使用的函数</span><br><span class="line"></span><br><span class="line">def cmp_callback(a, b):</span><br><span class="line">    return a.contents.value - b.contents.value</span><br><span class="line"></span><br><span class="line"># void qsort(void* base, size_t nitems, size_t size, int(*compar)(const void*, const void*))</span><br><span class="line"># int(*compar)(const void*, const void*)</span><br><span class="line"># 设定函数类型   c_int 函数返回值 POINTER 使用函数的参数</span><br><span class="line">CMPFUNC = CFUNCTYPE(c_int, POINTER(c_int), POINTER(c_int))</span><br><span class="line"></span><br><span class="line">qsort = lib.qsort</span><br><span class="line"># 初始化对象  设置回调函数</span><br><span class="line">cmpfuc = CMPFUNC(cmp_callback)</span><br><span class="line">a = (c_int*5)(89, 56, 43, 52, 67)</span><br><span class="line">for i in a:</span><br><span class="line">    print(i, end=&quot; &quot;)</span><br><span class="line">print(&quot;\n-----------&quot;)</span><br><span class="line">qsort(a, len(a), sizeof(c_int), cmpfuc)</span><br><span class="line">for i in a:</span><br><span class="line">    print(i, end=&quot; &quot;)</span><br><span class="line">print(&quot;\n-----------&quot;)</span><br></pre></td></tr></table></figure></h2><hr>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
  </entry>
  <entry>
    <title>C++PrimePlus</title>
    <url>/2022/11/14/C-PrimePlus/</url>
    <content><![CDATA[<img src="/images/huge.png" width="60%" height="30%" align="center/">
<span id="more"></span>




<h1 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h1><hr>
<h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p>1.编写通常接受一个参数(字符串的地址),并打印该字符串的函数。然而,如果提供了第二个参数(int类型），且该参数不为0，则该函数打印字符串的次数将为该函数被调用的次数(注意,字符串的打印次数不等于第二个参数的值而等于函数被调用的次数)。是的，这是一个非常可笑的函数，但它让您能够使用本章介绍的一些技术。在一个简单的程序中使用该函数，以演示该函数是如何工作的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void prt(char* s, int n = 0)</span><br><span class="line">&#123;</span><br><span class="line">	static int count = 0;</span><br><span class="line">	// static 所谓”记忆性”是指在两次函数调用时,</span><br><span class="line">	// 在第二次调用进入时, 能保持第一次调用退出时的值，直至重新赋值。</span><br><span class="line">	// static 具有全局唯一性的特点, 每次调用时, 都指向同一块内存。</span><br><span class="line">	count++;</span><br><span class="line">	if (n != 0)</span><br><span class="line">	&#123;</span><br><span class="line">		for(int i = 0; i &lt; count; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">		cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	char s[] = &quot;print&quot;;</span><br><span class="line">	prt(s);</span><br><span class="line">	prt(s);</span><br><span class="line">	prt(s);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	prt(s, 10);</span><br><span class="line"></span><br><span class="line">	system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><ol start="2">
<li>CandyBar结构包含3个成员。第一个成员存储candy bar的品牌名称；第二个成员存储candy bar的重量(可能有小数)；第三个成员存储candy bar的热量(整数)。 请编写一个程序,它使用一个这样的函数,即将CandyBar的引用、char指针、double和int作为参数,并用最后3个值设置相应的结构成员,最后3个参数的默认值分别为“Millennijum  Munch “、2.85和350。另外，该程序还包含一个以 CandyBar 的引用为参数，并显示结构内容的函数。请尽可能使用const。</li>
</ol>
<p>尽可能使用const避免修改不准修改的值<br>const在函数传参时加入可避免修改传入的结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct CandyBar</span><br><span class="line">&#123;</span><br><span class="line">	char* Brand;</span><br><span class="line">	double Weight;</span><br><span class="line">	int Heat;</span><br><span class="line">&#125;;</span><br><span class="line">void can(CandyBar &amp;car, const char* brand = &quot;Millennijum  Munch&quot;, const double weight = 2.85, const int heat = 350)</span><br><span class="line">//在函数中进行定义默认值</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;Brand is : %s\n&quot;, brand);</span><br><span class="line">	printf(&quot;Brand is : %f\n&quot;, weight);</span><br><span class="line">	printf(&quot;Brand is : %d\n&quot;, heat);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	CandyBar s;</span><br><span class="line">	can(s, &quot;OK&quot;, 4.5, 89);</span><br><span class="line"></span><br><span class="line">	system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><ol start="3">
<li>编写一个函数，它接受一个指向string对象的引用作为参数“并将该string对象的内容转换为大写，为此可使用表6.4描述的函数 toupper()。然后编写一个程序，它通过使用一个循环让您能够用不同的输入来测试这个函数，该程序的运行情况如下:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Enter a string (q to quit) : go away</span><br><span class="line"></span><br><span class="line">GO AWAY</span><br><span class="line">Next string （q to quit) : good grief！</span><br><span class="line"></span><br><span class="line">GOOD GRIEF!</span><br><span class="line">Next string (q to quit): q</span><br><span class="line"></span><br><span class="line">Bye.</span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt; </span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">string StoB(string &amp;s)</span><br><span class="line">&#123;</span><br><span class="line">	for (int i = 0; i &lt; s.length(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if (s[i] == &#x27; &#x27;)</span><br><span class="line">			continue;</span><br><span class="line">		if (s[i] &gt;= &#x27;a&#x27; &amp;&amp; s[i] &lt; &#x27;z&#x27;)</span><br><span class="line">			s[i] -= 32;</span><br><span class="line">	&#125;</span><br><span class="line">	return s;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	string s;</span><br><span class="line">	cout &lt;&lt; &quot;Enter a string (q to quit) : &quot;;</span><br><span class="line">	getline(cin, s);//不跳过空字符</span><br><span class="line">	while (1)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; StoB(s) &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; &quot;Next string (q to quit) : &quot;;</span><br><span class="line">		getline(cin, s);</span><br><span class="line">		if (s == &quot;q&quot;)</span><br><span class="line">			break;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; &quot;Bye.&quot; &lt;&lt; endl;</span><br><span class="line">	system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><p>4.下面是一个程序框架</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#include&lt;cstring&gt;       //for strlen(),strcpy()</span><br><span class="line"></span><br><span class="line">struct stringy &#123;</span><br><span class="line">char * str; //points to a string</span><br><span class="line">int ct; //length of string (not couting &#x27;\0&#x27;)</span><br><span class="line">&#125;;</span><br><span class="line">// prototypes for set(), show(), and show() go here</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">stringy beany;</span><br><span class="line">char testing[]=&quot;Reality isn&#x27;t what it used to be.&quot;;</span><br><span class="line">set(beany,testing); //first argument is a reference,</span><br><span class="line">//allocates space to hold copy of testing</span><br><span class="line">//sets str member of beany to point to the</span><br><span class="line">//new block, copies testing to new block,</span><br><span class="line">//and sets ct member of beany</span><br><span class="line">show(beany); //prints member string once</span><br><span class="line">show(beany, 2); //prints member string twice</span><br><span class="line">testing[0]= &#x27;D&#x27;;</span><br><span class="line">testing[1] = &#x27;u&#x27;;</span><br><span class="line">show(testing); //prints testing string once</span><br><span class="line">show(testing, 3); //prints testing string thrice</span><br><span class="line">show(&quot;Done!&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请提供其中描述的函数和原型，从而完成该程序。注意，应有两个 show ()函数，每个都使用默认参数。请尽可能的使用 const 参数。 set() 使用 new 分配足够的空间来存储定指的字符串。这里使用的技术与设计和实现类使用的相似。（可能还必须修改头文件的名称，删除 using 编译指令，这取决于所用的编译器。）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#include&lt;cstring&gt;       //for strlen(),strcpy()</span><br><span class="line"></span><br><span class="line">struct stringy &#123;</span><br><span class="line">	char* str; //points to a string</span><br><span class="line">	int ct; //length of string (not couting &#x27;\0&#x27;)</span><br><span class="line">&#125;;</span><br><span class="line">// prototypes for set(), show(), and show() go here</span><br><span class="line"></span><br><span class="line">void set(stringy&amp; beany, const char* testing)</span><br><span class="line">&#123;</span><br><span class="line">	beany.ct = strlen(testing) + 1;//返回字符串的长度，cstring</span><br><span class="line">	beany.str = new char[beany.ct];</span><br><span class="line">	strcpy_s(beany.str, beany.ct, testing);</span><br><span class="line">	//strcpy_s( char *restrict dest, rsize_t destsz, const char *restrict src ) restrict指针关键字</span><br><span class="line">	//   数组            数组长度（一般加1留给strcpy_s产生的空白字符）  目标传递的字符串</span><br><span class="line">	//strcpy_s允许从写入的最后一个字符开始破坏目标数组destsz以提高效率：它可以复制多字节块，然后检查空字节。</span><br><span class="line">&#125;</span><br><span class="line">void show(stringy&amp; beany, int n = 1)</span><br><span class="line">&#123;</span><br><span class="line">	while (n--)</span><br><span class="line">		cout &lt;&lt; beany.str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">void show(const char* s, int n = 1)</span><br><span class="line">&#123;</span><br><span class="line">	while(n--)</span><br><span class="line">		cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	stringy beany;</span><br><span class="line">	char testing[] = &quot;Reality isn&#x27;t what it used to be.&quot;;</span><br><span class="line">	set(beany, testing); //first argument is a reference,</span><br><span class="line">	//allocates space to hold copy of testing</span><br><span class="line">	//sets str member of beany to point to the</span><br><span class="line">	//new block, copies testing to new block,</span><br><span class="line">	//and sets ct member of beany</span><br><span class="line">	show(beany); //prints member string once</span><br><span class="line">	show(beany, 2); //prints member string twice</span><br><span class="line">	testing[0] = &#x27;D&#x27;;</span><br><span class="line">	testing[1] = &#x27;u&#x27;;</span><br><span class="line">	show(testing); //prints testing string once</span><br><span class="line">	show(testing, 3); //prints testing string thrice</span><br><span class="line">	show(&quot;Done!&quot;);</span><br><span class="line"></span><br><span class="line">	system(&quot;pause&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>C++基础学习</category>
      </categories>
      <tags>
        <tag>基础学习</tag>
      </tags>
  </entry>
</search>
